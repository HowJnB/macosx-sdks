#	FoundationJava.jobs
#	Copyright 1997-2002, Apple, Inc. All rights reserved.
#	Responsibility: Christopher Kane
#

# This .jobs file was automatically generated for your bridging convenience.
# Do not edit this file by hand, use WrapIt or any .jobs creation tool!

# Pseudo-comment giving the version of WrapIt writing this file.

#> version 31

# Pseudo-comments controlling interfaces and directories that are exposable;
# human readers please note: these pseudo-comments *must* appear *before* the
# header directive or they will not be obeyed!

#> exposable directory $NEXT_ROOT/$SYSTEM_LIBRARY_DIR/Frameworks/Foundation.framework/Headers

# Pseudo-comment giving WrapIt the name of the default package name.

#> package com.apple.cocoa.foundation

# Pseudo-comment giving WrapIt the prefix to remove from Objective-C interfaces names.

#> objcprefix NS

# Pseudo-comment giving WrapIt the prefix to add to Java classes and interfaces names.

#> javaprefix NS

# Source of the Objective-C interfaces specifications.

header FoundationJava.h

# Specifications files that are to be imported.

import ObjCJava.jobs

# Header files that are to be imported in the stub files.

stub-import FoundationJava.h

# Initialization of the Java framework, outside of what the bridge do.

preinit-callout _AutoreleasePoolInitialization
preinit-callout _GeometryInitialization
preinit-callout _RangeInitialization
preinit-callout _EnumeratorInitialization
preinit-callout _DecimalNumberInitialization
postinit-callout _FoundationStructureTypesInitialization

# Mapping of Objective-C types to Java basic types or classes.

type
    NSCalculationError = int
    NSComparisonResult = int
    NSNotificationSuspensionBehavior = int
    NSPoint = com.apple.cocoa.foundation.NSPoint using _NSConvertPointToJavaFromStack _NSConvertPointToJava _NSConvertPointFromJava struct-size 8
    NSPointPointer = com.apple.cocoa.foundation.NSMutablePoint using _NSConvertPointPointerToJavaFromStack _NSConvertPointPointerToJava _NSConvertPointPointerFromJava struct-size 4
    NSPostingStyle = int
    NSRange = com.apple.cocoa.foundation.NSRange using _NSConvertRangeToJavaFromStack _NSConvertRangeToJava _NSConvertRangeFromJava struct-size 8
    NSRangePointer = com.apple.cocoa.foundation.NSMutableRange using _NSConvertRangePointerToJavaFromStack _NSConvertRangePointerToJava _NSConvertRangePointerFromJava struct-size 4
    NSRect = com.apple.cocoa.foundation.NSRect using _NSConvertRectToJavaFromStack _NSConvertRectToJava _NSConvertRectFromJava struct-size 16
    NSRectEdge = int
    NSRectPointer = com.apple.cocoa.foundation.NSMutableRect using _NSConvertRectPointerToJavaFromStack _NSConvertRectPointerToJava _NSConvertRectPointerFromJava struct-size 4
    NSRoundingMode = int
    NSSearchPathDirectory = int
    NSSearchPathDomainMask = int
    NSSize = com.apple.cocoa.foundation.NSSize using _NSConvertSizeToJavaFromStack _NSConvertSizeToJava _NSConvertSizeFromJava struct-size 8
    NSSizePointer = com.apple.cocoa.foundation.NSMutableSize using _NSConvertSizePointerToJavaFromStack _NSConvertSizePointerToJava _NSConvertSizePointerFromJava struct-size 4
    NSStringEncoding = int
    NSTimeInterval = double
    longlong = long
    NSDeleteRule = int
    NSInsertionPosition = int
    NSRelativePosition = int
    NSWhoseSubelementIdentifier = int
    NSSaveOptions = int
    NSTestComparisonOperation = int
    NSPropertyListFormat = int
    int32_t = int
    int64_t = long
    AEEventClass = int
    AEEventID = int
    AEReturnID = int
    AEKeyword = int
    AETransactionID = int
    Boolean = boolean
    DescType = int
    OSType = int
    SInt32 = int

# Mapping of Objective-C selectors to Java methods.

selector
    +archiveRootObject:toFile: = archiveRootObjectToFile
    +classNameDecodedForArchiveClassName: = classNameGloballyDecodedForArchiveClassName
    +classNameEncodedForTrueClassName: = classNameGloballyEncodedForTrueClassName
    +decodeClassName:asClassName: = globallyDecodeClassNameAsClassName
    +encodeClassName:intoClassName: = globallyEncodeClassNameIntoClassName
    +localizedStringFromTable::: = localizedString
    +localizedStringFromTableInBundle:::: = localizedString
    +preferredLocalizationsFromArray: = preferredLocalizations
    +preferredLocalizationsFromArray:forPreferences: = preferredLocalizations
    +setValueTransformer:forName: = setValueTransformerForName
    +stringWithData:encoding: = stringWithDataUsingEncoding
    +timeIntervalSinceReferenceDate = currentTimeIntervalSinceReferenceDate
    +timeZoneWithName:data: = timeZoneWithNameAndData
    +timeZoneWithName:tryAbbreviation: = timeZoneWithName
    +writeString:toFile:atomically: = writeStringToFile
    +writeString:toFile:atomically:encoding: = writeStringToFile
    -addAttribute:value:range: = addAttributeInRange
    -addAttributes:range: = addAttributesInRange
    -addPort:forMode: = addPortForMode
    -addTimeInterval: = dateByAddingTimeInterval
    -addTimer:forMode: = addTimerForMode
    -appendString: = appendString
    -appendStringReference: = appendString
    -applyFontTraits:range: = applyFontTraitsInRange
    -attribute:atIndex:effectiveRange: = attributeAtIndex
    -attribute:atIndex:longestEffectiveRange:inRange: = attributeAtIndex
    -attributedSubstringFromRange: = attributedSubstringWithRange
    -boolForKey: = booleanForKey
    -boolValue = booleanValue
    -cancelPerformSelector:target:argument: = cancelPerformSelectorWithOrder
    -compare:options: = compareWithOptions
    -compare:options:range: = compareWithOptionsInRange
    -compareObject:toObject: = compareObjects
    -containsPort:forMode: = containsPortForMode
    -containsTimer:forMode: = containsTimerForMode
    -dateByAddingYears:months:days:hours:minutes:seconds: = dateByAddingGregorianUnits
    -decodeClassName:asClassName: = decodeClassNameAsClassName
    -dequeueNotificationsMatching:coalesceMask: = dequeueMatchingNotifications
    -effectiveRangeForAttribute:atIndex: = effectiveRangeForAttributeAtIndex
    -encodeClassName:intoClassName: = encodeClassNameIntoClassName
    -enqueueNotification:postingStyle:coalesceMask:forModes: = enqueueNotificationWithCoalesceMaskForModes
    -formIntersectionWithCharacterSet: = intersectCharacterSet
    -formUnionWithCharacterSet: = unionCharacterSet
    -initWithBool: = initWithBoolean
    -initWithCString:length: = initWithCStringAndLength
    -initWithData:encoding: = initWithDataUsingEncoding
    -initWithFormat:arguments: = initWithFormatAndArguments
    -initWithHTML:options:: = initWithHTMLAndOptions
    -initWithName:data: = initWithNameAndData
    -initWithName:object: = initWithNameAndObject
    -initWithName:object:userInfo: = initWithNameAndObjectAndUserInfo
    -initWithName:reason:userInfo: = initWithNameAndReasonAndUserInfo
    -initWithString:attributes: = initWithStringAndAttributes
    -initWithTimeInterval:sinceDate: = initWithTimeIntervalSinceDate
    -initWithYear:month:day:hour:minute:second:timeZone: = initWithYearMonthDayHourMinuteSecondTimeZone
    -insertAttributedString:atIndex: = insertAttributedStringAtIndex
    -insertObject:atIndex: = insertObjectAtIndex
    -insertString:atIndex: = insertStringAtIndex
    -insertStringReference:atIndex: = insertStringAtIndex
    -invertedSet = characterSetByInvertingCharacterSet
    -minusSet: = subtractSet
    -objectForKey:inDomain: = objectForKeyInDomain
    -objectIsForcedForKey:inDomain: = objectIsForcedForKeyInDomain
    -pathsForResourcesOfType:inDirectory: = pathsForResources
    -pathsForResourcesOfType:inDirectory:forLocalization: = pathsForResources
    -performSelector:target:argument:order:modes: = performSelectorWithOrder
    -postNotificationName:object: = postNotification
    -postNotificationName:object:userInfo: = postNotification
    -postNotificationName:object:userInfo:deliverImmediately: = postNotification
    -postNotificationName:object:userInfo:options: = postNotification
    -rangeOfCharacterFromSet:options: = rangeOfCharacterFromSetWithOptions
    -rangeOfCharacterFromSet:options:range: = rangeOfCharacterFromSetWithOptionsInRange
    -registerPort:forName: = registerPortForName
    -registerPort:name: = registerPortForName
    -removeAttribute:range: = removeAttributeInRange
    -removeObjectForKey:inDomain: = removeObjectForKeyInDomain
    -removeObjectIdenticalTo: = removeIdenticalObject
    -removeObjectIdenticalTo:inRange: = removeIdenticalObject
    -removePort:forMode: = removePortForMode
    -removeTimer:forMode: = removeTimerForMode
    -runMode:beforeDate: = runModeBeforeDate
    -runMode:untilDate: = runModeUntilDate
    -setAlignment:range: = setAlignmentInRange
    -setAttributes:range: = setAttributesInRange
    -setBool:forKey: = setBooleanForKey
    -setDouble:forKey: = setDoubleForKey
    -setFloat:forKey: = setFloatForKey
    -setInteger:forKey: = setIntegerForKey
    -setLong:forKey: = setLongForKey
    -setObject:forKey: = setObjectForKey
    -setObject:forKey:inDomain: = setObjectForKeyInDomain
    -setPersistentDomain:forName: = setPersistentDomainForName
    -setString: = setString
    -setStringReference: = setString
    -setVolatileDomain:forName: = setVolatileDomainForName
    -shiftIndexesStartingAtIndex:by: = shiftIndexes
    -handleTakeValue:forUnboundKey: = handleTakeValueForUnboundKey
    -unableToSetNilForKey: = unableToSetNullForKey
    -takeStoredValue:forKey: = takeStoredValueForKey
    -takeValue:forKey: = takeValueForKey
    -takeValue:forKeyPath: = takeValueForKeyPath
    +registerClassDescription:forClass: = registerClassDescription
    +null = nullValue
    -spellServer:didForgetWord:inLanguage: = spellServerDidForgetWord
    -spellServer:didLearnWord:inLanguage: = spellServerDidLearnWord
    -spellServer:findMisspelledWordInString:language:wordCount:countOnly: = spellServerFindMisspelledWord
    -spellServer:suggestCompletionsForPartialWordRange:inString:language: = spellServerSuggestCompletionsForPartialWordRange
    -spellServer:suggestGuessesForWord:inLanguage: = spellServerSuggestGuessesForWord
    +objectClassDescription: = _objectClassDescription
    +objectObjectSpecifier: = _objectObjectSpecifier
    +object:valueForKey: = _objectValueForKey
    +object:takeValue:forKey: = _objectTakeValueForKey
    +object:addObject:toPropertyWithKey: = _objectAddObjectToPropertyWithKey
    +object:addObject:toBothSidesOfRelationshipWithKey: = _objectAddObjectToBothSidesOfRelationshipWithKey
    +object:removeObject:fromPropertyWithKey: = _objectRemoveObjectFromPropertyWithKey
    +object:removeObject:fromBothSidesOfRelationshipWithKey: = _objectRemoveObjectFromBothSidesOfRelationshipWithKey
    +object:valueForKeyPath: = _objectValueForKeyPath
    +object:takeValue:forKeyPath: = _objectTakeValueForKeyPath
    +object:valuesForKeys: = _objectValuesForKeys
    +object:takeValuesFromDictionary: = _objectTakeValuesFromDictionary
    +object:takeStoredValue:forKey: = _objectTakeStoredValueForKey
    +object:coerceValue:forKey: = _objectCoerceValueForKey
    +object:valueAtIndex:inPropertyWithKey: = _objectValueAtIndexInPropertyWithKey
    +object:valueWithName:inPropertyWithKey: = _objectValueWithNameInPropertyWithKey
    +object:valueWithUniqueID:inPropertyWithKey: = _objectValueWithUniqueIDInPropertyWithKey
    +object:insertValue:atIndex:inPropertyWithKey: = _objectInsertValueAtIndexInPropertyWithKey
    +object:removeValueAtIndex:fromPropertyWithKey: = _objectRemoveValueAtIndexFromPropertyWithKey
    +object:replaceValueAtIndex:inPropertyWithKey:withValue: = _objectReplaceValueAtIndexInPropertyWithKeyWithValue
    +object:insertValue:inPropertyWithKey: = _objectInsertValueInPropertyWithKey
    -coerceValue:toClass: = coerceValueToClass
    -commandDescriptionWithAppleEventClass:andAppleEventCode: = commandDescriptionWithAppleEventCodes
    -valueAtIndex:inPropertyWithKey: = valueAtIndexInPropertyWithKey
    -valueWithName:inPropertyWithKey: = valueWithNameInPropertyWithKey
    -valueWithUniqueID:inPropertyWithKey: = valueWithUniqueIDInPropertyWithKey
    -replaceValueAtIndex:inPropertyWithKey:withValue: = replaceValueAtIndexInPropertyWithKey
    -insertValue:atIndex:inPropertyWithKey: = insertValueAtIndexInPropertyWithKey
    -removeValueAtIndex:fromPropertyWithKey: = removeValueAtIndexFromPropertyWithKey
    -insertValue:inPropertyWithKey: = insertValueInPropertyWithKey
    -coerceValue:forKey: = coerceValueForKey
    +setClassName:forClass: = setGlobalClassNameForClass
    -setClassName:forClass: = setClassNameForClass
    +setClass:forClassName: = setGlobalClassForClassName
    -setClass:forClassName: = setClassForClassName
    +classNameForClass: = globalClassNameForClass
    +classForClassName: = globalClassForClassName
    -encodeObject:forKey: = encodeObjectForKey
    -encodeConditionalObject:forKey: = encodeConditionalObjectForKey
    -encodeBool:forKey: = encodeBoolForKey
    -encodeByte:forKey: = encodeByteForKey
    -encodeChar:forKey: = encodeCharForKey
    -encodeShort:forKey: = encodeShortForKey
    -encodeInt32:forKey: = encodeIntForKey
    -encodeInt64:forKey: = encodeLongForKey
    -encodeFloat:forKey: = encodeFloatForKey
    -encodeDouble:forKey: = encodeDoubleForKey
    -encodePoint:forKey: = encodePointForKey
    -encodeSize:forKey: = encodeSizeForKey
    -encodeRect:forKey: = encodeRectForKey
    -decodeInt32ForKey: = decodeIntForKey
    -decodeInt64ForKey: = decodeLongForKey
    +propertyList:isValidForFormat: = propertyListIsValidForFormat
    -archiver:willEncodeObject: = archiverWillEncodeObject
    -archiver:didEncodeObject: = archiverDidEncodeObject
    -archiver:willReplaceObject:withObject: = archiverWillReplaceObject
    -unarchiver:cannotDecodeObjectOfClassName:originalClasses: = unarchiverCannotDecodeObject
    -unarchiver:didDecodeObject: = unarchiverDidDecodeObject
    -unarchiver:willReplaceObject:withObject: = unarchiverWillReplaceObject
    -_initWithContentsOfURL:andFillInErrorDict: = initWithContentsOfURL
    -_compileAndFillInErrorDict: = compile
    -_executeAndFillInErrorDict: = execute
    -_executeAppleEvent:andFillInErrorDict: = executeAppleEvent

# Default mappings of Objective-C selectors to overloaded Java methods.

selector
    +componentsSeparatedByString:: = componentsSeparatedByString
    -addObserver:selector:name:object: = addObserver
    -addObserver:selector:name:object:suspensionBehavior: = addObserver
    -attributesAtIndex:effectiveRange: = attributesAtIndex
    -attributesAtIndex:longestEffectiveRange:inRange: = attributesAtIndex
    -componentsSeparatedByString: = componentsSeparatedByString
    -init = init
    -init:: = init
    -initWithContentsOfURL: = initWithContentsOfURL
    -initWithContentsOfURL:encoding: = initWithContentsOfURL
    -initWithKey:ascending: = init
    -initWithKey:ascending:selector: = init
    -initWithTimeInterval:target:selector:userInfo:repeats: = initWithTimeInterval
    -initWithTimeInterval:timeZone: = initWithTimeInterval
    -pathForResource:ofType: = pathForResource
    -pathForResource:ofType:inDirectory: = pathForResource
    -pathForResource:ofType:inDirectory:forLocalization = pathForResource
    -rangeOfString: = rangeOfString
    -rangeOfString:options:range: = rangeOfString
    -removeObject: = removeObject
    -removeObject:inRange: = removeObject
    -removeObserver: = removeObserver
    -removeObserver:name:object: = removeObserver
    -replaceCharactersInRange:withAttributedString: = replaceCharactersInRange
    -replaceCharactersInRange:withString: = replaceCharactersInRange
    -replaceCharactersInRange:withStringReference: = replaceCharactersInRange
    -writeToURL:atomically: = writeToURL
    -writeToURL:atomically:encoding: = writeToURL
    -initWithContainerClassDescription:containerSpecifier:key: = initWithContainerClassDescription
    -initWithContainerClassDescription:containerSpecifier:key:index: = initWithContainerClassDescription
    -initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier: = initWithContainerClassDescription
    -initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier: = initWithContainerClassDescription
    -initWithContainerClassDescription:containerSpecifier:key:test: = initWithContainerClassDescription
    -initWithSuiteName:className:dictionary: = initWithSuiteNameAndClassName
    -initWithSuiteName:commandName:dictionary: = initWithSuiteNameAndCommandName

# Exposed category interfaces.

category NSObject(NSKeyedArchiverDelegate) = com.apple.cocoa.foundation.NSKeyedArchiver.Delegate
    -archiver:willEncodeObject:
    -archiver:didEncodeObject:
    -archiver:willReplaceObject:withObject:
    -archiverWillFinish:
    -archiverDidFinish:

category NSObject(NSKeyedUnarchiverDelegate) = com.apple.cocoa.foundation.NSKeyedUnarchiver.Delegate
    -unarchiver:cannotDecodeObjectOfClassName:originalClasses:
    -unarchiver:didDecodeObject:
    -unarchiver:willReplaceObject:withObject:
    -unarchiverWillFinish:
    -unarchiverDidFinish:

category NSObject(NSSpellServerDelegate) = com.apple.cocoa.foundation.NSSpellServer.Delegate
    -spellServer:didForgetWord:inLanguage:
    -spellServer:didLearnWord:inLanguage:
    -spellServer:suggestCompletionsForPartialWordRange:inString:language:
    -spellServer:suggestGuessesForWord:inLanguage:

protocol NSCoding = com.apple.cocoa.foundation.NSCoding

# Exposed class interfaces.

class NSSpellServer = com.apple.cocoa.foundation.NSSpellServer
    -delegate
    constructor -init
    -isWordInUserDictionaries:caseSensitive:
    -registerLanguage:byVendor:
    -run
    -setDelegate:

class NSNull = com.apple.cocoa.foundation.NSNull
    implements NSCoding
    +null

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSNull(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }
    @}

class NSClassDescription = abstract com.apple.cocoa.foundation.NSClassDescription
    -attributeKeys
    +classDescriptionForClass:
    +invalidateClassDescriptionCache
    -inverseForRelationshipKey:
    +registerClassDescription:forClass:
    -toManyRelationshipKeys
    -toOneRelationshipKeys

    @{
        public static final String ClassDescriptionNeededForClassNotification = "NSClassDescriptionNeededForClassNotification";
    @}

class NSPropertyListSerialization = com.apple.cocoa.foundation.NSPropertyListSerialization
    +propertyList:isValidForFormat:

    @{
    public static final int PropertyListImmutable = 0;
    public static final int PropertyListMutableContainers = 1;
    public static final int PropertyListMutableContainersAndLeaves = 2;

    public static final int PropertyListOpenStepFormat = 1;
    public static final int PropertyListXMLFormat = 100;
    public static final int PropertyListBinaryFormat = 200;

    public static native NSData dataFromPropertyList(Object plist, int format, java.lang.String[] errorString);
    public static native Object propertyListFromData(NSData data, int opt, int[] format, java.lang.String[] errorString);

    public static native String stringFromPropertyList(Object aPropertyList);
    public static native Object propertyListFromString(String plString);

    private static native NSData olddataFromPropertyList(Object aPropertyList);
    private static native Object oldpropertyListFromData(NSData plData);

	/** @deprecated NSPropertyListSerialization.dataFromPropertyList() is obsolete */
    public static NSData dataFromPropertyList(Object aPropertyList) {
	return olddataFromPropertyList(aPropertyList);
    }
	/** @deprecated NSPropertyListSerialization.propertyListFromData() is obsolete */
    public static Object propertyListFromData(NSData plData) {
	return oldpropertyListFromData(plData);
    }

	/** @deprecated NSPropertyListSerialization.XMLDataFromPropertyList() is obsolete */
    public static native NSData XMLDataFromPropertyList(Object aPropertyList);
	/** @deprecated NSPropertyListSerialization.propertyListFromXMLData() is obsolete */
    public static native Object propertyListFromXMLData(NSData xmlData);

    @}

class NSKeyedArchiver = com.apple.cocoa.foundation.NSKeyedArchiver
    +archivedDataWithRootObject:
    +archiveRootObject:toFile:
    constructor -initForWritingWithMutableData:
    -setDelegate:
    -delegate
    -setOutputFormat:
    -outputFormat
    -finishEncoding
    +setClassName:forClass:
    -setClassName:forClass:
    +classNameForClass:
    -classNameForClass:
    -encodeObject:forKey:
    -encodeConditionalObject:forKey:
    -encodeBool:forKey:
    -encodeByte:forKey:
    -encodeChar:forKey:
    -encodeShort:forKey:
    -encodeInt32:forKey:
    -encodeInt64:forKey:
    -encodeFloat:forKey:
    -encodeDouble:forKey:
    -encodePoint:forKey:
    -encodeSize:forKey:
    -encodeRect:forKey:
    -encodeByte:
    -encodeChar:
    -encodeConditionalObject:
    -encodeDouble:
    -encodeFloat:
    -encodeInt:
    -encodeLong:
    -encodeObject:
    -encodeShort:
    -versionForClassName:
    -encodeDataObject:

class NSKeyedUnarchiver = com.apple.cocoa.foundation.NSKeyedUnarchiver
    +unarchiveObjectWithData:
    +unarchiveObjectWithFile:
    constructor -initForReadingWithData:
    -setDelegate:
    -delegate
    -finishDecoding
    +setClass:forClassName:
    -setClass:forClassName:
    +classForClassName:
    -classForClassName:
    -containsValueForKey:
    -decodeObjectForKey:
    -decodeBoolForKey:
    -decodeByteForKey:
    -decodeCharForKey:
    -decodeShortForKey:
    -decodeInt32ForKey:
    -decodeInt64ForKey:
    -decodeFloatForKey:
    -decodeDoubleForKey:
    -decodePointForKey:
    -decodeSizeForKey:
    -decodeRectForKey:
    -decodeByte
    -decodeChar
    -decodeDouble
    -decodeFloat
    -decodeInt
    -decodeLong
    -decodeObject
    -decodeShort
    -versionForClassName:
    -decodeDataObject

class NSArchiver = com.apple.cocoa.foundation.NSArchiver
    deprecated +archivedDataWithRootObject:
    deprecated +archiveRootObject:toFile:
    -classNameEncodedForTrueClassName:
    +classNameEncodedForTrueClassName:
    -data
    -encodeClassName:intoClassName:
    +encodeClassName:intoClassName:
    -encodeDataObject:
    -encodeByte:
    -encodeChar:
    -encodeConditionalObject:
    -encodeDouble:
    -encodeFloat:
    -encodeInt:
    -encodeLong:
    -encodeObject:
    -encodeShort:
    deprecated -encodeRootObject:
    constructor -initForWritingWithMutableData:
    -replaceObject:withObject:
    -versionForClassName:

class NSUnarchiver = com.apple.cocoa.foundation.NSUnarchiver
    +classNameDecodedForArchiveClassName:
    -classNameDecodedForArchiveClassName:
    -data
    +decodeClassName:asClassName:
    -decodeClassName:asClassName:
    -decodeDataObject
    -decodeByte
    -decodeChar
    -decodeDouble
    -decodeFloat
    -decodeInt
    -decodeLong
    -decodeObject
    -decodeShort
    constructor -initForReadingWithData:
    -isAtEnd
    -replaceObject:withObject:
    +unarchiveObjectWithData:
    +unarchiveObjectWithFile:
    -versionForClassName:

class NSArray = com.apple.cocoa.foundation.NSArray
    implements NSCoding
    -arrayByAddingObject:
    -arrayByAddingObjectsFromArray:
    -componentsJoinedByString:
    +componentsSeparatedByString::
    -containsObject:
    -count
    -firstObjectCommonWithArray:
    constructor -init
    constructor -initWithArray:
    -isEqualToArray:
    -lastObject
    -sortedArrayUsingDescriptors:
    -sortedArrayUsingSelector:
    -subarrayWithRange:

@{

	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSArray(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

protected native void initWithObjects(Object[] objects);

public java.util.Enumeration objectEnumerator() {
    return new com.apple.cocoa.foundation.NSEnumerator(this, false);
}

public java.util.Enumeration reverseObjectEnumerator() {
    return new com.apple.cocoa.foundation.NSEnumerator(this, true);
}

public NSArray(Object[] objects) {
    super(false, 0);
    initWithObjects(objects);
}

public NSArray(Object obj) {
    super(false, 0);
    initWithObjects(new Object[] {obj});
}

public static final int NotFound = 0x7fffffff;

public native void getObjects(Object[] objs, NSRange range);
public void getObjects(Object[] objs) {
    this.getObjects(objs, new NSRange(0, this.count()));
}

private native int indexOf(Object obj, NSRange range, boolean identical);
public int indexOfObject(Object obj) {
    return indexOf(obj, new NSRange(0, this.count()), false);
}
public int indexOfObject(Object obj, NSRange range) {
    return indexOf(obj, range, false);
}

/** @deprecated NSArray.indexOfIdenticalObject() is deprecated; it cannot work properly with the ObjC-Java bridge */ 
public int indexOfIdenticalObject(Object obj) {
    return indexOf(obj, new NSRange(0, this.count()), true);
}
/** @deprecated NSArray.indexOfIdenticalObject() is deprecated; it cannot work properly with the ObjC-Java bridge */
public int indexOfIdenticalObject(Object obj, NSRange range) {
    return indexOf(obj, range, true);
}

    public native java.lang.Object objectAtIndex (int index);
    @}

class NSAttributedString = com.apple.cocoa.foundation.NSAttributedString
    implements NSCoding
    -attribute:atIndex:effectiveRange:
    -attribute:atIndex:longestEffectiveRange:inRange:
    -attributedSubstringFromRange:
    -attributesAtIndex:effectiveRange:
    -attributesAtIndex:longestEffectiveRange:inRange:
    -containsAttachments
    -docFormatFromRange:documentAttributes:
    -doubleClickAtIndex:
    -fontAttributesInRange:
    constructor -init
    constructor -initWithAttributedString:
    constructor -initWithData::
    constructor -initWithHTML:::
    constructor -initWithHTML:options::
    constructor -initWithRTFDFileWrapper::
    constructor -initWithString:
    constructor -initWithString:attributes:
    constructor -initWithURL::
    -isEqualToAttributedString:
    -length
    -lineBreakBeforeIndex:withinRange:
    -lineBreakByHyphenatingBeforeIndex:withinRange:
    -nextWordFromIndex:forward:
    -RTFDFileWrapperFromRange:documentAttributes:
    -RTFFromRange:documentAttributes:
    -rulerAttributesInRange:
    -stringReference

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSAttributedString(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

public static final String FontAttributeName = "NSFont";
public static final String ParagraphStyleAttributeName = "NSParagraphStyle";
public static final String ForegroundColorAttributeName = "NSColor";
public static final String UnderlineStyleAttributeName = "NSUnderline";
public static final String SuperscriptAttributeName = "NSSuperScript";
public static final String BackgroundColorAttributeName = "NSBackgroundColor";
public static final String AttachmentAttributeName = "NSAttachment";
public static final String LigatureAttributeName = "NSLigature";
public static final String BaselineOffsetAttributeName = "NSBaselineOffset";
public static final String KernAttributeName = "NSKern";
public static final String LinkAttributeName = "NSLink";
public static final String CharacterShapeAttributeName = "NSCharacterShape";
public static final String StrokeWidthAttributeName = "NSStrokeWidth";
public static final String StrokeColorAttributeName = "NSStrokeColor";
public static final String UnderlineColorAttributeName = "NSUnderlineColor";
public static final String StrikethroughStyleAttributeName = "NSStrikethrough";
public static final String StrikethroughColorAttributeName = "NSStrikethroughColor";
public static final String ShadowAttributeName = "NSShadow";
public static final String ObliquenessAttributeName = "NSObliqueness";
public static final String ExpansionAttributeName = "NSExpansion";
public static final String CursorAttributeName = "NSCursor";
public static final String ToolTipAttributeName = "NSToolTip";

public static final String NSPlainTextDocumentType = "NSPlainText";
public static final String NSRTFTextDocumentType = "NSRTF";
public static final String NSRTFDTextDocumentType = "NSRTFD";
public static final String NSMacSimpleTextDocumentType = "NSMacSimpleText";
public static final String NSHTMLTextDocumentType = "NSHTML";
public static final String NSDocFormatTextDocumentType = "NSDocFormat";
public static final String NSWordMLTextDocumentType = "NSWordML";

public static final int UnderlineStyleNone = 0x00;
public static final int UnderlineStyleSingle = 0x01;
public static final int UnderlineStyleThick = 0x02;
public static final int UnderlineStyleDouble = 0x09;

public static final int UnderlinePatternSolid = 0x0000;
public static final int UnderlinePatternDot = 0x0100;
public static final int UnderlinePatternDash = 0x0200;
public static final int UnderlinePatternDashDot = 0x0300;
public static final int UnderlinePatternDashDotDot = 0x0400;

public static final int UnderlineByWordMask = 1<<15;

public static final int NoUnderlineStyle = 0;
public static final int SingleUnderlineStyle = 1;
public static final int UnderlineStrikethroughMask = 1<<14;
    @}

class NSBundle = com.apple.cocoa.foundation.NSBundle
    +allBundles
    +allFrameworks
    -builtInPlugInsPath
    +bundleForClass:
    -bundleIdentifier
    -bundlePath
    +bundleWithIdentifier:
    +bundleWithPath:
    -developmentLocalization
    -executablePath
    -infoDictionary
    -isLoaded
    -load
    -localizations
    -localizedInfoDictionary
    +localizedString::
    -localizedStringForKey:value:table:
    +localizedStringFromTable:::
    +localizedStringFromTableInBundle::::
    +mainBundle
    -objectForInfoDictionaryKey:
    -pathForAuxiliaryExecutable:
    -pathForResource:ofType:
    -pathForResource:ofType:inDirectory:
    -pathForResource:ofType:inDirectory:forLocalization:
    -pathsForResourcesOfType:inDirectory:
    -pathsForResourcesOfType:inDirectory:forLocalization:
    -preferredLocalizations
    +preferredLocalizationsFromArray:
    +preferredLocalizationsFromArray:forPreferences:
    -principalClass
    -privateFrameworksPath
    -resourcePath
    -sharedFrameworksPath
    -sharedSupportPath

    @{
/** @deprecated NSBundle(String) constructor is deprecated; it cannot work to replace instances in Java; use the bundleWithPath() method instead */
public NSBundle(java.lang.String s) {
    throw new java.lang.IllegalArgumentException("NSBundle(String) constructor is deprecated; use bundleWithPath() instead");
}

public static String localizedString (String key)
{
    return (NSBundle.mainBundle()).localizedStringForKey(key, "", null);
}    
    @}

class NSCalendarDate = com.apple.cocoa.foundation.NSGregorianDate
    -dateByAddingYears:months:days:hours:minutes:seconds:
    -dayOfCommonEra
    -dayOfMonth
    -dayOfWeek
    -dayOfYear
    -description
    -hourOfDay
    constructor -init
    constructor -initWithTimeInterval:sinceDate:
    constructor -initWithTimeInterval:timeZone:
    constructor -initWithTimeIntervalSinceReferenceDate:
    constructor -initWithYear:month:day:hour:minute:second:timeZone:
    -microsecondOfSecond
    -minuteOfHour
    -monthOfYear
    -secondOfMinute
    -timeZone
    -yearOfCommonEra

    @{
	protected NSGregorianDate(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

public static class IntRef {
    public int value;
}

public boolean isEqualToGregorianDate(NSGregorianDate otherDate) {
    return isEqualToDate(otherDate) && timeZone().isEqualToTimeZone(otherDate.timeZone());
}

public boolean equals(Object obj) {
    if (obj instanceof NSGregorianDate)
        return this.isEqualToGregorianDate((NSGregorianDate)obj);
    return false;
}

public int hashCode() {
    return (int)java.lang.Math.round(timeIntervalSinceReferenceDate());
}

public native void gregorianUnitsSinceDate(NSGregorianDate date, NSGregorianDate.IntRef years, NSGregorianDate.IntRef months, NSGregorianDate.IntRef days, NSGregorianDate.IntRef hours, NSGregorianDate.IntRef minutes, NSGregorianDate.IntRef seconds);
    @}

class NSCharacterSet = com.apple.cocoa.foundation.NSCharacterSet
    implements NSCoding
    +alphanumericCharacterSet
    -bitmapRepresentation
    -characterIsMember:
    -characterSetByIntersectingCharacterSet:
    -characterSetBySubtractingCharacterSet:
    -characterSetByUnioningCharacterSet:
    +characterSetWithContentsOfFile:
    +controlCharacterSet
    +decimalDigitCharacterSet
    +decomposableCharacterSet
    +illegalCharacterSet
    constructor -init
    constructor -initWithBitmapRepresentation:
    constructor -initWithRange:
    constructor -initWithString:
    -invertedSet
    +letterCharacterSet
    +lowercaseLetterCharacterSet
    +nonBaseCharacterSet
    +punctuationCharacterSet
    +uppercaseLetterCharacterSet
    +whitespaceAndNewlineCharacterSet
    +whitespaceCharacterSet
    +capitalizedLetterCharacterSet
    +symbolCharacterSet
    -isSupersetOfSet:

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSCharacterSet(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }
    @}

class NSCoder = abstract com.apple.cocoa.foundation.NSCoder
    -systemVersion
    -allowsKeyedCoding

    @{

    public static final String InconsistentArchiveException = "NSInconsistentArchiveException";
    public static final String InvalidArchiveOperationException = "NSInvalidArchiveOperationException";
    public static final String InvalidUnarchiveOperationException = "NSInvalidUnarchiveOperationException";

    public void encodeObject (java.lang.Object obj) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public java.lang.Object decodeObject () { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeDataObject (com.apple.cocoa.foundation.NSData obj) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public com.apple.cocoa.foundation.NSData decodeDataObject () { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public int versionForClassName (java.lang.String className) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }

    public void encodeDouble (double v) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeFloat (float v) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeLong (long v) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeInt (int v) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeShort (short v) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeByte (byte v) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeChar (char v) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public double decodeDouble () { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public float decodeFloat () { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public long decodeLong () { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public int decodeInt () { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public short decodeShort () { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public byte decodeByte () { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public char decodeChar () { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }

    public void encodeObjectForKey(java.lang.Object obj, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeConditionalObjectForKey(java.lang.Object obj, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeDoubleForKey(double v, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeFloatForKey(float v, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeLongForKey(long v, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeIntForKey(int v, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeShortForKey(short v, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeByteForKey(byte v, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeCharForKey(char v, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public void encodeBoolForKey(boolean v, java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }

    public boolean containsValueForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public java.lang.Object decodeObjectForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public double decodeDoubleForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public float decodeFloatForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public long decodeLongForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public int decodeIntForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public short decodeShortForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public byte decodeByteForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public char decodeCharForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }
    public boolean decodeBoolForKey(java.lang.String key) { throw new Error("abstract method cannot be invoked on " + this.getClass().getName()); }

    @}

class NSData = com.apple.cocoa.foundation.NSData
    implements NSCoding
    constructor -init
    constructor -initWithContentsOfURL:
    constructor -initWithData:
    -isEqualToData:
    -length
    -subdataWithRange:
    -writeToURL:atomically:

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSData(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }


public static NSData dataWithContentsOfMappedFile(java.io.File file) {
    return new NSData(file);
}

public native byte[] bytes(int start, int length);

protected native void initWithBytes(byte[] bytes, int start, int length);

public NSData(byte[] bytes, int start, int length)
{
    super(false, 0);

    int size = bytes.length;
    if (size < length) {
	throw new java.lang.IllegalArgumentException("length paramter greater than length of bytes");
    } else if (size < start + length) {
	throw new java.lang.IllegalArgumentException("end location beyond length of bytes");
    }

    initWithBytes(bytes, start, length);
}

public NSData(byte[] bytes)
{
    this(bytes, 0, bytes.length);
}

protected native void initWithString(String ppl);

/** @deprecated To initialize an NSData from a property list use NSPropertyListSerialization.propertyListFromString(); to initialize an NSData from a file, pass either a File or a URL object */
public NSData(String ppl)
{
    super(false, 0);
    initWithString(ppl);
}

protected native void initWithPath(String path);

public NSData(java.io.File path)
{
    super(false, 0);
    initWithPath(path.getPath());
}    
    @}

class NSDate = com.apple.cocoa.foundation.NSDate
    implements NSCoding
    -compare:
    -dateByAddingTimeInterval:
    -description
    -earlierDate:
    constructor -init
    constructor -initWithTimeInterval:sinceDate:
    constructor -initWithTimeIntervalSinceReferenceDate:
    -isEqualToDate:
    -laterDate:
    -timeIntervalSinceDate:
    -timeIntervalSinceNow
    +timeIntervalSinceReferenceDate
    -timeIntervalSinceReferenceDate
    +distantPast
    +distantFuture

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSDate(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

public static final double TimeIntervalSince1970 = 978307200.0D;

public static final NSDate DateFor1970 = new NSDate(-TimeIntervalSince1970);

public boolean equals(Object obj) {
    if (obj instanceof NSDate)
        return this.isEqualToDate((NSDate)obj);
    return false;
}

public int hashCode() {
    return (int)java.lang.Math.round(timeIntervalSinceReferenceDate());
}
    
public static long timeIntervalToMilliseconds(double timeInterval) {
    return (long)java.lang.Math.round(timeInterval * 1000.0);
}

public static double millisecondsToTimeInterval(long milliseconds) {
    return (double)((double)milliseconds / 1000.0);
}

    @}

class NSDateFormatter = com.apple.cocoa.foundation.NSGregorianDateFormatter
    -allowsNaturalLanguage
    -dateFormat
    constructor -init
    constructor -initWithDateFormat:allowNaturalLanguage:

    @{
	protected NSGregorianDateFormatter(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

    public native String stringForObjectValue(Object obj) throws NSFormatter.FormattingException;
    public native com.apple.cocoa.foundation.NSAttributedString attributedStringForObjectValue(Object obj, com.apple.cocoa.foundation.NSDictionary attrs) throws NSFormatter.FormattingException;
    public native Object objectValueForString(String str) throws NSFormatter.ParsingException;
    public boolean isPartialStringValid(String str) { return true; }
    public String replacementStringForString(String str) { return str; }

    @}

map
    NSDecimalNumber = java.math.BigDecimal using _NSDecimalNumberToJavaBigDecimal _NSJavaBigDecimalToDecimalNumber

class NSDictionary = com.apple.cocoa.foundation.NSDictionary
    implements NSCoding
    -allKeys
    -allKeysForObject:
    -allValues
    -count
    constructor -init
    constructor -initWithDictionary:
    -isEqualToDictionary:
    -objectsForKeys:notFoundMarker:

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSDictionary(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }


public NSDictionary(Object[] objs, Object[] keys) {
        super(false, 0);
    NSMutableDictionary dict = new NSMutableDictionary();
    if (objs.length != keys.length)
	throw new IllegalArgumentException("length of objs (" + objs.length + ") not equal to length of keys (" + keys.length +")");
    for (int idx = 0, cnt = objs.length; idx < cnt; idx++)
	dict.setObjectForKey(objs[idx], keys[idx]);
    initWithDictionary(dict);
}
public NSDictionary(Object obj, Object key) {
    super(false, 0);
    NSMutableDictionary dict = new NSMutableDictionary();
    dict.setObjectForKey(obj, key);
    initWithDictionary(dict);
}

public java.util.Enumeration keyEnumerator() {
    return new com.apple.cocoa.foundation.NSEnumerator(this.allKeys(), false);
}

public java.util.Enumeration objectEnumerator() {
    return new com.apple.cocoa.foundation.NSEnumerator(this.allValues(), false);
}

    public native java.lang.Object objectForKey (java.lang.Object key);
    @}

class NSDistributedNotificationCenter = com.apple.cocoa.foundation.NSDistributedNotificationCenter
    -addObserver:selector:name:object:suspensionBehavior:
    +defaultCenter
    constructor -init
    +notificationCenterForType:
    -postNotificationName:object:userInfo:deliverImmediately:
    -postNotificationName:object:userInfo:options:
    -setSuspended:
    -suspended

    @{
public static final String LocalNotificationCenterType = "_NSLocalNotificationCenterType";

public static final int NotificationSuspensionBehaviorDrop = 1;
public static final int NotificationSuspensionBehaviorCoalesce = 2;
public static final int NotificationSuspensionBehaviorHold = 3;
public static final int NotificationSuspensionBehaviorDeliverImmediately = 4;

public static final int NotificationDeliverImmediately = 1;
public static final int NotificationPostToAllSessions = 2;
    @}

map
    NSEnumerator = com.apple.cocoa.foundation.NSEnumerator using _NSObjCEnumeratorToJavaEnumerator _NSJavaEnumeratorToObjCEnumerator

class NSError = com.apple.cocoa.foundation.NSError
    implements NSCoding
    -code
    -domain
    constructor -initWithDomain:code:userInfo:
    -localizedDescription
    -userInfo

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSError(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

	public static final String LocalizedDescriptionKey = "NSLocalizedDescription";
	public static final String UnderlyingErrorKey = "NSUnderlyingError";
	public static final String POSIXErrorDomain = "NSPOSIXErrorDomain";
	public static final String OSStatusErrorDomain = "NSOSStatusErrorDomain";
	public static final String MachErrorDomain = "NSMachErrorDomain";
    @}

class NSFormatter = abstract com.apple.cocoa.foundation.NSFormatter
    implements NSCoding

    @{

	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSFormatter(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }


    public static class FormattingException extends Exception {
        public FormattingException(String str) {
            super(str);
        }
    }

    public static class ParsingException extends Exception {
        public ParsingException(String str) {
            super(str);
        }
    }

    public abstract String stringForObjectValue(Object obj) throws NSFormatter.FormattingException;

    public abstract com.apple.cocoa.foundation.NSAttributedString attributedStringForObjectValue(Object obj, com.apple.cocoa.foundation.NSDictionary attrs) throws NSFormatter.FormattingException;

    public String editingStringForObjectValue(Object obj) {
        String r;
	try {
	    r = this.stringForObjectValue(obj);
        } catch (NSFormatter.FormattingException e) {
	    r = "";
	}
	return r;
    }

    public abstract Object objectValueForString(String str) throws NSFormatter.ParsingException;

    public boolean isPartialStringValid(String str) { return true; }
    public String replacementStringForString(String str) { return str; }

    @}

class NSIndexSet = com.apple.cocoa.foundation.NSIndexSet
    implements NSCoding
    -containsIndex:
    -containsIndexes:
    -containsIndexesInRange:
    -count
    -firstIndex
    -indexGreaterThanIndex:
    -indexGreaterThanOrEqualToIndex:
    -indexLessThanIndex:
    -indexLessThanOrEqualToIndex:
    constructor -init
    constructor -initWithIndex:
    constructor -initWithIndexesInRange:
    constructor -initWithIndexSet:
    -intersectsIndexesInRange:
    -isEqualToIndexSet:
    -lastIndex

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSIndexSet(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }
 
	public static final int NotFound = 0x7fffffff;
   @}

class NSJavaHelpHFSFileTypes = com.apple.cocoa.foundation.NSHFSFileTypes
    +fileTypeForHFSTypeCode:
    +hfsTypeCodeFromFileType:
    +hfsTypeOfFile:

class NSJavaHelpPath = com.apple.cocoa.foundation.NSPathUtilities
    +displayNameAtPath:
    +fileAttributes::
    +isAbsolutePath:
    +lastPathComponent:
    +pathComponents:
    +pathExtension:
    +pathFromURL:
    +pathsMatchingExtensions::
    +pathWithComponents:
    +searchPathForDirectoriesInDomains:::
    +setFileAttributes::
    +stringByAbbreviatingWithTildeInPath:
    +stringByAppendingPathComponent::
    +stringByAppendingPathExtension::
    +stringByDeletingLastPathComponent:
    +stringByDeletingPathExtension:
    +stringByExpandingTildeInPath:
    +stringByResolvingSymlinksInPath:
    +stringByStandardizingPath:
    +stringsByAppendingPaths::
    +temporaryDirectory
    +URLWithPath:

    @{
// NSFileAttributes constants

public static final String FileType = "NSFileType";
public static final String FileTypeDirectory = "NSFileTypeDirectory";
public static final String FileTypeRegular = "NSFileTypeRegular";
public static final String FileTypeSymbolicLink = "NSFileTypeSymbolicLink";
public static final String FileTypeSocket = "NSFileTypeSocket";
public static final String FileTypeCharacterSpecial = "NSFileTypeCharacterSpecial";
public static final String FileTypeBlockSpecial = "NSFileTypeBlockSpecial";
public static final String FileTypeUnknown = "NSFileTypeUnknown";
public static final String FileSize = "NSFileSize";
public static final String FileModificationDate = "NSFileModificationDate";
public static final String FileReferenceCount = "NSFileReferenceCount";
public static final String FileDeviceIdentifier = "NSFileDeviceIdentifier";
public static final String FileOwnerAccountName = "NSFileOwnerAccountName";
public static final String FileGroupOwnerAccountName = "NSFileGroupOwnerAccountName";
public static final String FilePosixPermissions = "NSFilePosixPermissions";
public static final String FileSystemNumber = "NSFileSystemNumber";
public static final String FileSystemFileNumber = "NSFileSystemFileNumber";
public static final String FileExtensionHidden = "NSFileExtensionHidden";
public static final String FileHFSCreatorCode = "NSFileHFSCreatorCode";
public static final String FileHFSTypeCode = "NSFileHFSTypeCode";
public static final String FileImmutable = "NSFileImmutable";
public static final String FileAppendOnly = "NSFileAppendOnly";
public static final String FileCreationDate = "NSFileCreationDate";
public static final String FileOwnerAccountID = "NSFileOwnerAccountID";
public static final String FileGroupOwnerAccountID = "NSFileGroupOwnerAccountID";
public static final String FileSystemSize = "NSFileSystemSize";
public static final String FileSystemFreeSize = "NSFileSystemFreeSize";
public static final String FileSystemNodes = "NSFileSystemNodes";
public static final String FileSystemFreeNodes = "NSFileSystemFreeNodes";

// Search path directory values.

public final static int ApplicationDirectory = 1;
public final static int DemoApplicationDirectory = 2;
public final static int DeveloperApplicationDirectory = 3;
public final static int AdminApplicationDirectory = 4;
public final static int LibraryDirectory = 5;
public final static int DeveloperDirectory = 6;
public final static int UserDirectory = 7;
public final static int DocumentationDirectory = 8;
public final static int AllApplicationsDirectory = 100;
public final static int AllLibrariesDirectory = 101;

// Search path domain mask values.

public final static int UserDomainMask = 1;
public final static int LocalDomainMask = 2;
public final static int NetworkDomainMask = 4;
public final static int SystemDomainMask = 8;
public final static int AllDomainsMask = 0x0ffff;
    @}

class NSJavaHelpSystem = com.apple.cocoa.foundation.NSSystem
    +arguments
    +currentFullUserName
    +currentHomeDirectory
    +currentUserName
    +environment
    +foundationVersionNumber
    +homeDirectoryForUser:
    +hostName
    +log:
    +operatingSystem
    +operatingSystemName
    +operatingSystemVersionString
    +processName
    +setArguments:
    +setProcessName:

    @{
public static void setArguments(String[] args) {
    NSMutableArray infoArgs = new NSMutableArray(args);
    infoArgs.insertObjectAtIndex("java", 0);
    setArguments(infoArgs);
}    

public static final int WindowsNTOperatingSystem = 1;
public static final int Windows95OperatingSystem = 2;
public static final int SolarisOperatingSystem = 3;
public static final int HPUXOperatingSystem = 4;
public static final int MACHOperatingSystem = 5;

/*
 * Version numbers
 */
public static final double FoundationVersionNumber10_0 = 397.4d;
public static final double FoundationVersionNumber10_1 = 425.0d;

    @}

class NSMutableArray = com.apple.cocoa.foundation.NSMutableArray
    -addObjectsFromArray:
    constructor -init
    constructor -initWithArray:
    -removeAllObjects
    -removeLastObject
    -removeObject:inRange:
    -removeObjectAtIndex:
    deprecated -removeObjectIdenticalTo:inRange:
    -removeObjectsInArray:
    -removeObjectsInRange:
    -replaceObjectsInRange:withObjectsFromArray:range:
    -setArray:
    -sortUsingDescriptors:
    -sortUsingSelector:

    @{
	protected NSMutableArray(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

public void removeObject(Object anObject) {
    this.removeObject(anObject, new NSRange(0, this.count()));
}

/** @deprecated NSMutableArray.removeIdenticalObject() is deprecated; it cannot work properly with the ObjC-Java bridge */
public void removeIdenticalObject(Object anObject) {
    this.removeIdenticalObject(anObject, new NSRange(0, this.count()));
}

public NSMutableArray(Object[] objects) {
    super(false, 0);
    initWithObjects(objects);
}

public NSMutableArray(Object obj) {
    super(false, 0);
    initWithObjects(new Object[] {obj});
}
    public native void insertObjectAtIndex(java.lang.Object obj, int index);
    public native void replaceObjectAtIndex(int index, java.lang.Object obj);
    public native void addObject(java.lang.Object obj);
    @}

class NSMutableAttributedString = com.apple.cocoa.foundation.NSMutableAttributedString
    -addAttribute:value:range:
    -addAttributes:range:
    -appendAttributedString:
    -applyFontTraits:range:
    -beginEditing
    -deleteCharactersInRange:
    -endEditing
    -fixAttachmentAttributeInRange:
    -fixAttributesInRange:
    -fixFontAttributeInRange:
    -fixParagraphStyleAttributeInRange:
    constructor -init
    constructor -initWithAttributedString:
    constructor -initWithData::
    constructor -initWithHTML:::
    constructor -initWithHTML:options::
    constructor -initWithRTFDFileWrapper::
    constructor -initWithString:
    constructor -initWithString:attributes:
    constructor -initWithURL::
    -insertAttributedString:atIndex:
    -mutableStringReference
    -readFromData:::
    -readFromURL:::
    -removeAttribute:range:
    -replaceCharactersInRange:withAttributedString:
    -replaceCharactersInRange:withString:
    -setAlignment:range:
    -setAttributedString:
    -setAttributes:range:
    -subscriptRange:
    -superscriptRange:
    -unscriptRange:
    -updateAttachmentsFromPath:

    @{
	protected NSMutableAttributedString(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }
    @}

class NSMutableCharacterSet = com.apple.cocoa.foundation.NSMutableCharacterSet
    -addCharacter:
    -addCharactersInRange:
    -addCharactersInString:
    -formIntersectionWithCharacterSet:
    -formUnionWithCharacterSet:
    constructor -init
    -invertCharacterSet
    -removeCharacter:
    -removeCharactersInRange:
    -removeCharactersInString:
    -subtractCharacterSet:

    @{
	protected NSMutableCharacterSet(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }
    @}

class NSMutableData = com.apple.cocoa.foundation.NSMutableData
    -appendData:
    -increaseLengthBy:
    constructor -init
    constructor -initWithData:
    constructor -initWithLength:
    -resetBytesInRange:
    -setData:
    -setLength:

    @{
	protected NSMutableData(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }
    @}

class NSMutableDictionary = com.apple.cocoa.foundation.NSMutableDictionary
    -addEntriesFromDictionary:
    constructor -init
    constructor -initWithDictionary:
    -removeAllObjects
    -removeObjectForKey:
    -removeObjectsForKeys:
    -setDictionary:

    @{
	protected NSMutableDictionary(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

	public native void setObjectForKey (java.lang.Object obj, java.lang.Object key);
    @}

class NSMutableIndexSet = com.apple.cocoa.foundation.NSMutableIndexSet
    -addIndex:
    -addIndexes:
    -addIndexesInRange:
    -removeAllIndexes
    -removeIndex:
    -removeIndexes:
    -removeIndexesInRange:
    -shiftIndexesStartingAtIndex:by:

    @{
	protected NSMutableIndexSet(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }
    @}

class NSMutableSet = com.apple.cocoa.foundation.NSMutableSet
    -addObject:
    -addObjectsFromArray:
    constructor -init
    constructor -initWithSet:
    -intersectSet:
    -minusSet:
    -removeAllObjects
    -removeObject:
    -setSet:
    -unionSet:

    @{
	protected NSMutableSet(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }
    @}

class NSMutableStringReference = com.apple.cocoa.foundation.NSMutableStringReference
    -appendString:
    -appendStringReference:
    -deleteCharactersInRange:
    constructor -initWithContentsOfURL:
    constructor -initWithContentsOfURL:encoding:
    -insertString:atIndex:
    -insertStringReference:atIndex:
    -replaceCharactersInRange:withString:
    -replaceCharactersInRange:withStringReference:
    -replaceOccurrencesOfString:withString:options:range:
    -setString:
    -setStringReference:

class NSNotification = com.apple.cocoa.foundation.NSNotification
    implements NSCoding
    constructor -initWithName:object:
    constructor -initWithName:object:userInfo:
    -name
    -object
    -userInfo

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSNotification(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }


// /** @deprecated NSNotification() constructor is deprecated; it cannot work in Java; use the class methods to get NSNotification instead */
// public NSNotification() {
//    throw new java.lang.IllegalArgumentException("NSNotification() constructor is deprecated");
// }

    @}

class NSNotificationCenter = com.apple.cocoa.foundation.NSNotificationCenter
    -addObserver:selector:name:object:
    +defaultCenter
    constructor -init
    -postNotification:
    -postNotificationName:object:
    -postNotificationName:object:userInfo:
    -removeObserver:
    -removeObserver:name:object:

class NSNotificationQueue = com.apple.cocoa.foundation.NSNotificationQueue
    +defaultQueue
    -dequeueNotificationsMatching:coalesceMask:
    -enqueueNotification:postingStyle:
    -enqueueNotification:postingStyle:coalesceMask:forModes:
    constructor -init
    constructor -initWithNotificationCenter:

    @{
public static final int PostWhenIdle = 1;
public static final int PostASAP = 2;
public static final int PostNow = 3;

public static final int NotificationNoCoalescing = 0;
public static final int NotificationCoalescingOnName = 1;
public static final int NotificationCoalescingOnSender = 2;
    @}

class NSNumberFormatter = com.apple.cocoa.foundation.NSNumberFormatter
    -allowsFloats
    -attributedStringForNil
    -attributedStringForNotANumber
    -attributedStringForZero
    -decimalSeparator
    -format
    -hasThousandSeparators
    constructor -init
    -localizesFormat
    -negativeFormat
    -positiveFormat
    -setAllowsFloats:
    -setAttributedStringForNil:
    -setAttributedStringForNotANumber:
    -setAttributedStringForZero:
    -setDecimalSeparator:
    -setFormat:
    -setHasThousandSeparators:
    -setLocalizesFormat:
    -setNegativeFormat:
    -setPositiveFormat:
    -setTextAttributesForNegativeValues:
    -setTextAttributesForPositiveValues:
    -setThousandSeparator:
    -textAttributesForNegativeValues
    -textAttributesForPositiveValues
    -thousandSeparator

    @{
	protected NSNumberFormatter(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

    public native String stringForObjectValue(Object obj) throws NSFormatter.FormattingException;
    public native com.apple.cocoa.foundation.NSAttributedString attributedStringForObjectValue(Object obj, com.apple.cocoa.foundation.NSDictionary attrs) throws NSFormatter.FormattingException;
    public native Object objectValueForString(String str) throws NSFormatter.ParsingException;
    public boolean isPartialStringValid(String str) { return true; }
    public String replacementStringForString(String str) { return str; }

    @}

class NSPort = com.apple.cocoa.foundation.NSPort
    -delegate
    constructor -init
    constructor -initWithMachPort:
    -invalidate
    -isValid
    -setDelegate:

class NSRunLoop = com.apple.cocoa.foundation.NSRunLoop
    -acceptInputForMode:beforeDate:
    -addPort:forMode:
    -addTimer:forMode:
    -allModes
    -cancelPerformSelector:target:argument:
    -containsPort:forMode:
    -containsTimer:forMode:
    -currentMode
    +currentRunLoop
    constructor -init
    -limitDateForMode:
    -performSelector:target:argument:order:modes:
    -portsForMode:
    -removePort:forMode:
    -removeTimer:forMode:
    -run
    -runMode:beforeDate:
    -runMode:untilDate:
    -timersForMode:

    @{
public static final String DefaultRunLoopMode = "NSDefaultRunLoopMode";
    @}

class NSSet = com.apple.cocoa.foundation.NSSet
    implements NSCoding
    -allObjects
    -anyObject
    -containsObject:
    -count
    constructor -init
    constructor -initWithSet:
    -intersectsSet:
    -isEqualToSet:
    -isSubsetOfSet:
    -member:
    -setByIntersectingSet:
    -setBySubtractingSet:
    -setByUnioningSet:

    @{

	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSSet(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }


public NSSet(Object[] objs) {
    super(false, 0);
    NSMutableSet set = new NSMutableSet();
    for (int idx = 0, cnt = objs.length; idx < cnt; idx++)
	set.addObject(objs[idx]);
    initWithSet(set);
}
public NSSet(Object obj) {
    super(false, 0);
    NSMutableSet set = new NSMutableSet();
    set.addObject(obj);
    initWithSet(set);
}

public java.util.Enumeration objectEnumerator() {
    return new com.apple.cocoa.foundation.NSEnumerator(this.allObjects(), false);
}

    @}

class NSSortDescriptor = com.apple.cocoa.foundation.NSSortDescriptor
    implements NSCoding
    -ascending
    constructor -initWithKey:ascending:
    constructor -initWithKey:ascending:selector:
    -key
    -selector
    -compareObject:toObject:
    -reversedSortDescriptor
 
   @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSSortDescriptor(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }
   @}

class NSStringReference = com.apple.cocoa.foundation.NSStringReference
    +availableStringEncodings
    -canBeConvertedToEncoding:
    -characterAtIndex:
    -commonPrefixWithString:options:
    -componentsSeparatedByString:
    -dataUsingEncoding:allowLossyConversion:
    +defaultCStringEncoding
    -fastestEncoding
    -hasPrefix:
    -hasSuffix:
    constructor -initWithContentsOfURL:
    constructor -initWithContentsOfURL:encoding:
    constructor -initWithData:encoding:
    -length
    -lineRangeForRange:
    +localizedNameOfStringEncoding:
    -paragraphRangeForRange:
    -rangeOfString:
    -rangeOfString:options:range:
    -smallestEncoding
    -string
    -substringWithRange:
    -writeToURL:atomically:
    -writeToURL:atomically:encoding:
    -decomposedStringWithCanonicalMapping
    -precomposedStringWithCanonicalMapping
    -decomposedStringWithCompatibilityMapping
    -precomposedStringWithCompatibilityMapping

    @{
public static final int ASCIIStringEncoding = 1;
public static final int NEXTSTEPStringEncoding = 2;
public static final int JapaneseEUCStringEncoding = 3;
public static final int UTF8StringEncoding = 4;
public static final int ISOLatin1StringEncoding = 5;
public static final int SymbolStringEncoding = 6;
public static final int NonLossyASCIIStringEncoding = 7;
public static final int ShiftJISStringEncoding = 8;
public static final int ISOLatin2StringEncoding = 9;
public static final int UnicodeStringEncoding = 10;
public static final int WindowsCP1251StringEncoding = 11;
public static final int WindowsCP1252StringEncoding = 12;
public static final int WindowsCP1253StringEncoding = 13;
public static final int WindowsCP1254StringEncoding = 14;
public static final int WindowsCP1250StringEncoding = 15;
public static final int ISO2022JPStringEncoding = 21;
public static final int MacOSRomanStringEncoding = 30;
    @}

class NSTimeZone = com.apple.cocoa.foundation.NSTimeZone
    implements NSCoding
    -abbreviation
    +abbreviationDictionary
    -abbreviationForDate:
    -data
    +defaultTimeZone
    -description
    -isDaylightSavingTime
    -isDaylightSavingTimeForDate:
    -isEqualToTimeZone:
    +knownTimeZoneNames
    +localTimeZone
    -name
    +resetSystemTimeZone
    -secondsFromGMT
    -secondsFromGMTForDate:
    +setDefaultTimeZone:
    +systemTimeZone
    +timeZoneWithName:tryAbbreviation:
    +timeZoneWithName:data:
    +timeZoneForSecondsFromGMT:

    @{
	protected native void encodeWithCoder(com.apple.cocoa.foundation.NSCoder encoder);
	protected NSTimeZone(com.apple.cocoa.foundation.NSCoder decoder, long token) { super(false, 0); initWithCoder(decoder, token); }

public boolean equals(Object obj) {
    if (obj instanceof NSTimeZone)
        return this.isEqualToTimeZone((NSTimeZone)obj);
    return false;
}

public int hashCode() {
    return name().hashCode();
}

// /** @deprecated NSTimeZone() constructor is deprecated; it cannot work in Java; use the class methods to get NSTimeZones instead */
// public NSTimeZone() {
//     throw new java.lang.IllegalArgumentException("NSTimeZone() constructor is deprecated");
// }

/** @deprecated NSTimeZone(int) constructor is deprecated; it cannot work to replace instances in Java; use the timeZoneForSecondsFromGMT() method instead */
public NSTimeZone(int x) {
    throw new java.lang.IllegalArgumentException("NSTimeZone(int) constructor is deprecated; use timeZoneForSecondsFromGMT() instead");
}

/** @deprecated NSTimeZone(java.lang.String, com.apple.cocoa.foundation.NSData) constructor is deprecated; it cannot work to replace instances in Java; use the timeZoneWithNameAndData() method instead */
public NSTimeZone(java.lang.String s, com.apple.cocoa.foundation.NSData d) {
    throw new java.lang.IllegalArgumentException("NSTimeZone(java.lang.String, com.apple.cocoa.foundation.NSData) constructor is deprecated; use timeZoneWithNameAndData() instead");
}

/** @deprecated NSTimeZone(java.lang.String, boolean) constructor is deprecated; it cannot work to replace instances in Java; use the timeZoneWithName() method instead */
public NSTimeZone(java.lang.String s, boolean tryAbbrev) {
    throw new java.lang.IllegalArgumentException("NSTimeZone(java.lang.String, boolean) constructor is deprecated; use timeZoneWithName() instead");
}

    @}

class NSTimer = com.apple.cocoa.foundation.NSTimer
    constructor -initWithTimeInterval:target:selector:userInfo:repeats:
    -invalidate
    -isValid
    -timeInterval
    -userInfo

map
    NSURL = java.net.URL using _NSObjCURLToJavaURL _NSJavaURLToObjCURL

class NSUndoManager = com.apple.cocoa.foundation.NSUndoManager
    -beginUndoGrouping
    -canRedo
    -canUndo
    -disableUndoRegistration
    -enableUndoRegistration
    -endUndoGrouping
    -groupingLevel
    -groupsByEvent
    constructor -init
    -isRedoing
    -isUndoing
    -isUndoRegistrationEnabled
    -levelsOfUndo
    -redo
    -redoActionName
    -redoMenuItemTitle
    -redoMenuTitleForUndoActionName:
    -registerUndoWithTarget:selector:object:
    -removeAllActions
    -removeAllActionsWithTarget:
    -runLoopModes
    -setActionName:
    -setGroupsByEvent:
    -setLevelsOfUndo:
    -setRunLoopModes:
    -undo
    -undoActionName
    -undoMenuItemTitle
    -undoMenuTitleForUndoActionName:
    -undoNestedGroup

    @{
public static final int UndoCloseGroupingRunLoopOrdering = 350000;
public static final String CheckpointNotification = "NSUndoManagerCheckpointNotification";
public static final String WillUndoChangeNotification = "NSUndoManagerWillUndoChangeNotification";
public static final String WillRedoChangeNotification = "NSUndoManagerWillRedoChangeNotification";
public static final String DidUndoChangeNotification = "NSUndoManagerDidUndoChangeNotification";
public static final String DidRedoChangeNotification = "NSUndoManagerDidRedoChangeNotification";
public static final String DidOpenUndoGroupNotification = "NSUndoManagerDidOpenUndoGroupNotification";
public static final String WillCloseUndoGroupNotification = "NSUndoManagerWillCloseUndoGroupNotification";

public native void registerUndoWithTargetAndArguments(Object target, NSSelector selector, Object arguments[]);
    @}

class NSUserDefaults = com.apple.cocoa.foundation.NSUserDefaults
    -addSuiteNamed:
    -arrayForKey:
    -boolForKey:
    -dataForKey:
    -dictionaryForKey:
    -dictionaryRepresentation
    -doubleForKey:
    -floatForKey:
    constructor -init
    -integerForKey:
    -longForKey:
    -objectForKey:
    -objectForKey:inDomain:
    -objectIsForcedForKey:
    -objectIsForcedForKey:inDomain:
    -persistentDomainForName:
    -persistentDomainNames
    -registerDefaults:
    -removeObjectForKey:
    -removeObjectForKey:inDomain:
    -removePersistentDomainForName:
    -removeSuiteNamed:
    -removeVolatileDomainForName:
    +resetStandardUserDefaults
    -setBool:forKey:
    -setDouble:forKey:
    -setFloat:forKey:
    -setInteger:forKey:
    -setLong:forKey:
    -setObject:forKey:
    -setObject:forKey:inDomain:
    -setPersistentDomain:forName:
    -setVolatileDomain:forName:
    +standardUserDefaults
    -stringForKey:
    -synchronize
    -volatileDomainForName:
    -volatileDomainNames
    
    @{
public static final String GlobalDomain = "NSGlobalDomain";
public static final String ArgumentDomain = "NSArgumentDomain";
public static final String RegistrationDomain = "NSRegistrationDomain";
public static final String UserDefaultsDidChangeNotification = "NSUserDefaultsDidChangeNotification";
public static final String WeekDayNameArray = "NSWeekDayNameArray";
public static final String ShortWeekDayNameArray = "NSShortWeekDayNameArray";
public static final String MonthNameArray = "NSMonthNameArray";
public static final String ShortMonthNameArray = "NSShortMonthNameArray";
public static final String TimeFormatString = "NSTimeFormatString";
public static final String DateFormatString = "NSDateFormatString";
public static final String TimeDateFormatString = "NSTimeDateFormatString";
public static final String ShortTimeDateFormatString = "NSShortTimeDateFormatString";
public static final String CurrencySymbol = "NSCurrencySymbol";
public static final String DecimalSeparator = "NSDecimalSeparator";
public static final String ThousandsSeparator = "NSThousandsSeparator";
public static final String DecimalDigits = "NSDecimalDigits";
public static final String AMPMDesignation = "NSAMPMDesignation";
public static final String HourNameDesignations = "NSHourNameDesignations";
public static final String YearMonthWeekDesignations = "NSYearMonthWeekDesignations";
public static final String EarlierTimeDesignations = "NSEarlierTimeDesignations";
public static final String LaterTimeDesignations = "NSLaterTimeDesignations";
public static final String ThisDayDesignations = "NSThisDayDesignations";
public static final String NextDayDesignations = "NSNextDayDesignations";
public static final String NextNextDayDesignations = "NSNextNextDayDesignations";
public static final String PriorDayDesignations = "NSPriorDayDesignations";
public static final String DateTimeOrdering = "NSDateTimeOrdering";
public static final String InternationalCurrencyString = "NSInternationalCurrencyString";
public static final String ShortDateFormatString = "NSShortDateFormatString";
public static final String PositiveCurrencyFormatString = "NSPositiveCurrencegativeCurrencyFormatString";
public static final String NegativeCurrencyFormatString = "NSNegativeCurrencyFormatString";

/** @deprecated NSUserDefaults.setSearchList() is obsolete */
public native void setSearchList(NSArray array);

/** @deprecated NSUserDefaults.searchList() is obsolete */
public native  NSArray searchList();
    @}

class NSValueTransformer = com.apple.cocoa.foundation.NSValueTransformer
    +allowsReverseTransformation
    -reverseTransformedValue:
    +setValueTransformer:forName:
    -transformedValue:
    +transformedValueClass
    +valueTransformerForName:
    +valueTransformerNames

    @{
public static final String NegateBooleanTransformerName = "NSNegateBoolean";
public static final String IsNilTransformerName = "NSIsNil";
public static final String IsNotNilTransformerName = "NSIsNotNil";
public static final String UnarchiveFromDataTransformerName = "NSUnarchiveFromData";
    @}

class NSCloneCommand = com.apple.cocoa.foundation.NSCloneCommand
    constructor -init
    constructor -initWithCommandDescription:
    -keySpecifier
    -setReceiversSpecifier:

class NSCloseCommand = com.apple.cocoa.foundation.NSCloseCommand
    constructor -init
    constructor -initWithCommandDescription:
    -saveOptions

    @{
public static final int SaveOptionsYes = 0;
public static final int SaveOptionsNo = 1;
public static final int SaveOptionsAsk = 2;
    @}

class NSScriptCoercionHandler = com.apple.cocoa.foundation.NSScriptCoercionHandler
    -coerceValue:toClass:
    constructor -init
    -registerCoercer:selector:toConvertFromClass:toClass:
    +sharedCoercionHandler

class NSCountCommand = com.apple.cocoa.foundation.NSCountCommand
    constructor -init
    constructor -initWithCommandDescription:

class NSCreateCommand = com.apple.cocoa.foundation.NSCreateCommand
    -createClassDescription
    constructor -init
    constructor -initWithCommandDescription:
    -resolvedKeyDictionary

class NSDeleteCommand = com.apple.cocoa.foundation.NSDeleteCommand
    constructor -init
    constructor -initWithCommandDescription:
    -keySpecifier
    -setReceiversSpecifier:

class NSExistsCommand = com.apple.cocoa.foundation.NSExistsCommand
    constructor -init
    constructor -initWithCommandDescription:

class NSGetCommand = com.apple.cocoa.foundation.NSGetCommand
    constructor -init
    constructor -initWithCommandDescription:

class NSIndexSpecifier = com.apple.cocoa.foundation.NSIndexSpecifier
    -index
    constructor -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerClassDescription:containerSpecifier:key:index:
    constructor -initWithContainerSpecifier:key:
    -setIndex:

class NSKeyValue = com.apple.cocoa.foundation.NSKeyValue
    private +objectClassDescription:
    private +objectObjectSpecifier:
    private +object:valueForKey:
    private +object:takeValue:forKey:
    private +object:addObject:toPropertyWithKey:
    private +object:addObject:toBothSidesOfRelationshipWithKey:
    private +object:removeObject:fromPropertyWithKey:
    private +object:removeObject:fromBothSidesOfRelationshipWithKey:
    private +object:valueForKeyPath:
    private +object:takeValue:forKeyPath:
    private +object:valuesForKeys:
    private +object:takeValuesFromDictionary:
    private +object:takeStoredValue:forKey:
    private +object:coerceValue:forKey:
    private +object:valueAtIndex:inPropertyWithKey:
    private +object:valueWithName:inPropertyWithKey:
    private +object:valueWithUniqueID:inPropertyWithKey:
    private +object:insertValue:atIndex:inPropertyWithKey:
    private +object:removeValueAtIndex:fromPropertyWithKey:
    private +object:replaceValueAtIndex:inPropertyWithKey:withValue:
    private +object:insertValue:inPropertyWithKey:
    
    @{
public static final String OperationNotSupportedForKeyException = "OperationNotSupportedForKey";

public static com.apple.cocoa.foundation.NSClassDescription classDescription(Object receiver) {
    return NSKeyValue._objectClassDescription(receiver);
}

public static NSScriptObjectSpecifier objectSpecifier(Object receiver) {
    return NSKeyValue._objectObjectSpecifier(receiver);
}

public static Object valueForKey(Object receiver, String key) {
    return NSKeyValue._objectValueForKey(receiver, key);
}

public static void takeValueForKey(Object receiver, Object value, String key) {
    NSKeyValue._objectTakeValueForKey(receiver, value, key);
}

public static void addObjectToPropertyWithKey(Object receiver, Object value, String key) {
    NSKeyValue._objectAddObjectToPropertyWithKey(receiver, value, key);
}

public static void addObjectToBothSidesOfRelationshipWithKey(Object receiver, Object value, String key) {
    NSKeyValue._objectAddObjectToBothSidesOfRelationshipWithKey(receiver, value, key);
}

public static void removeObjectFromPropertyWithKey(Object receiver, Object value, String key) {
    NSKeyValue._objectRemoveObjectFromPropertyWithKey(receiver, value, key);
}

public static void removeObjectFromBothSidesOfRelationshipWithKey(Object receiver, Object value, String key) {
    NSKeyValue._objectRemoveObjectFromBothSidesOfRelationshipWithKey(receiver, value, key);
}

public static Object valueForKeyPath(Object receiver, String keyPath) {
    return NSKeyValue._objectValueForKeyPath(receiver, keyPath);
}

public static void takeValueForKeyPath(Object receiver, Object value, String keyPath) {
    NSKeyValue._objectTakeValueForKeyPath(receiver, value, keyPath);
}

public static NSDictionary valuesForKeys(Object receiver, NSArray keys) {
    return (NSDictionary)NSKeyValue._objectValuesForKeys(receiver, keys);
}

public static void _takeValuesFromDictionary(Object receiver, NSDictionary dict) {
    NSKeyValue._objectTakeValuesFromDictionary(receiver, dict);
}

public static void takeStoredValueForKey(Object receiver, Object value, String key) {
    NSKeyValue._objectTakeStoredValueForKey(receiver, value, key);
}

public static Object coerceValueForKey(Object receiver, Object value, String key) {
    return NSKeyValue._objectCoerceValueForKey(receiver, value, key);
}

public static Object valueAtIndexInPropertyWithKey(Object receiver, int index, String key) {
    return NSKeyValue._objectValueAtIndexInPropertyWithKey(receiver, index, key);
}

public static Object valueWithNameInPropertyWithKey(Object receiver, String name, String key) {
    return NSKeyValue._objectValueWithNameInPropertyWithKey(receiver, name, key);
}

public static Object valueWithUniqueIDInPropertyWithKey(Object receiver, Object uniqueID, String key) {
    return NSKeyValue._objectValueWithUniqueIDInPropertyWithKey(receiver, uniqueID, key);
}

public static void insertValueAtIndexInPropertyWithKey(Object receiver, Object value, int index, String key) {
    NSKeyValue._objectInsertValueAtIndexInPropertyWithKey(receiver, value, index, key);
}

public static void removeValueAtIndexFromPropertyWithKey(Object receiver, int index, String key) {
    NSKeyValue._objectRemoveValueAtIndexFromPropertyWithKey(receiver, index, key);
}

public static void replaceValueAtIndexInPropertyWithKeyWithValue(Object receiver, int index, String key, Object value) {
    NSKeyValue._objectReplaceValueAtIndexInPropertyWithKeyWithValue(receiver, index, key, value);
}

public static void insertValueInPropertyWithKey(Object receiver, Object value, String key) {
    NSKeyValue._objectInsertValueInPropertyWithKey(receiver, value, key);
}
    @}

class NSLogicalTest = com.apple.cocoa.foundation.NSLogicalTest
    constructor -init
    private -initAndTestWithTests:
    private -initNotTestWithTest:
    private -initOrTestWithTests:

    @{
public static final int AndLogicalTest = 0;
public static final int OrLogicalTest = 1;
public static final int NotLogicalTest = 2;

public NSLogicalTest(int testType, Object tests) {
    if (testType == NotLogicalTest) {
	this.initNotTestWithTest((NSScriptWhoseTest)tests);
    } else if (testType == OrLogicalTest) {
	this.initOrTestWithTests((NSArray)tests);
    } else {
	this.initAndTestWithTests((NSArray)tests);
    }
}
    @}

class NSMiddleSpecifier = com.apple.cocoa.foundation.NSMiddleSpecifier
    constructor -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerSpecifier:key:

class NSMoveCommand = com.apple.cocoa.foundation.NSMoveCommand
    constructor -init
    constructor -initWithCommandDescription:
    -keySpecifier
    -setReceiversSpecifier:

class NSQuitCommand = com.apple.cocoa.foundation.NSQuitCommand
    constructor -init
    constructor -initWithCommandDescription:
    -saveOptions

    @{
public static final int SaveOptionsYes = 0;
public static final int SaveOptionsNo = 1;
public static final int SaveOptionsAsk = 2;
    @}

class NSScriptObjectSpecifier = com.apple.cocoa.foundation.NSScriptObjectSpecifier
    -childSpecifier
    -containerClassDescription
    -containerIsObjectBeingTested
    -containerIsRangeContainerObject
    -containerSpecifier
    -evaluationErrorNumber
    -evaluationErrorSpecifier
    -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerSpecifier:key:
    -key
    -keyClassDescription
    -objectsByEvaluatingSpecifier
    -objectsByEvaluatingWithContainers:
    -setChildSpecifier:
    -setContainerClassDescription:
    -setContainerIsObjectBeingTested:
    -setContainerIsRangeContainerObject:
    -setContainerSpecifier:
    -setEvaluationErrorNumber:
    -setKey:

    @{
public static final int NoSpecifierError = 0;
public static final int NoTopLevelContainersSpecifierError = 1;
public static final int ContainerSpecifierError = 2;
public static final int UnknownKeySpecifierError = 3;
public static final int InvalidIndexSpecifierError = 4;
public static final int InvlaidIndexSpecifierError = 4;
public static final int InternalSpecifierError = 5;
public static final int OperationNotSupportedForKeySpecifierError = 6;

public native int[] indicesOfObjectsByEvaluatingWithContainer(Object container);
    @}

class NSNameSpecifier = com.apple.cocoa.foundation.NSNameSpecifier
    constructor -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerClassDescription:containerSpecifier:key:name:
    constructor -initWithContainerSpecifier:key:
    -name
    -setName:

class NSPositionalSpecifier = com.apple.cocoa.foundation.NSPositionalSpecifier
    -evaluate
    constructor -init
    constructor -initWithPosition:objectSpecifier:
    -insertionContainer
    -insertionIndex
    -insertionKey
    -insertionReplaces
    -setInsertionClassDescription:

    @{
public static final int PositionAfter = 0;
public static final int PositionBefore = 1;
public static final int PositionBeginning = 2;
public static final int PositionEnd = 3;
public static final int PositionReplace = 4;
    @}

class NSPropertySpecifier = com.apple.cocoa.foundation.NSPropertySpecifier
    constructor -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerSpecifier:key:

class NSRandomSpecifier = com.apple.cocoa.foundation.NSRandomSpecifier
    constructor -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerSpecifier:key:

class NSRangeSpecifier = com.apple.cocoa.foundation.NSRangeSpecifier
    -endSpecifier
    constructor -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:
    constructor -initWithContainerSpecifier:key:
    -startSpecifier
    -setEndSpecifier:
    -setStartSpecifier:

class NSRelativeSpecifier = com.apple.cocoa.foundation.NSRelativeSpecifier
    -baseSpecifier
    constructor -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:
    constructor -initWithContainerSpecifier:key:
    -relativePosition
    -setBaseSpecifier:
    -setRelativePosition:

    @{
public static final int RelativeAfter = 0;
public static final int RelativeBefore = 1;
    @}

class NSScriptClassDescription = com.apple.cocoa.foundation.NSScriptClassDescription
    -appleEventCode
    -appleEventCodeForKey:
    -classDescriptionForKey:
    -className
    -defaultSubcontainerAttributeKey
    constructor -init
    constructor -initWithSuiteName:className:dictionary:
    -isLocationRequiredToCreateForKey:
    -isReadOnlyKey:
    -keyWithAppleEventCode:
    -matchesAppleEventCode:
    -selectorForCommand:
    -suiteName
    -superclassDescription
    -supportsCommand:
    -typeForKey:

class NSScriptCommand = com.apple.cocoa.foundation.NSScriptCommand
    -appleEvent
    -arguments
    -commandDescription
    +currentCommand
    -directParameter
    -evaluatedArguments
    -evaluatedReceivers
    -executeCommand
    constructor -init
    constructor -initWithCommandDescription:
    -isWellFormed
    -performDefaultImplementation
    -receiversSpecifier
    -resumeExecutionWithResult:
    -scriptErrorNumber
    -scriptErrorString
    -setArguments:
    -setDirectParameter:
    -setReceiversSpecifier:
    -setScriptErrorNumber:
    -setScriptErrorString:
    -suspendExecution

    @{
public static final int NoScriptError = 0;
public static final int ReceiverEvaluationScriptError = 1;
public static final int KeySpecifierEvaluationScriptError = 2;
public static final int ArgumentEvaluationScriptError = 3;
public static final int ReceiversCantHandleCommandScriptError = 4;
public static final int RequiredArgumentsMissingScriptError = 5;
public static final int ArgumentsWrongScriptError = 6;
public static final int UnknownKeyScriptError = 7;
public static final int InternalScriptError = 8;
public static final int OperationNotSupportedForKeyScriptError = 9;
public static final int CannotCreateScriptCommandError = 10;
    @}

class NSScriptCommandDescription = com.apple.cocoa.foundation.NSScriptCommandDescription
    -appleEventClassCode
    -appleEventCode
    -appleEventCodeForArgumentWithName:
    -appleEventCodeForReturnType
    -argumentNames
    -commandClassName
    -commandName
    -createCommandInstance
    constructor -init
    constructor -initWithSuiteName:commandName:dictionary:
    -isOptionalArgumentWithName:
    -returnType
    -suiteName
    -typeForArgumentWithName:

class NSScriptExecutionContext = com.apple.cocoa.foundation.NSScriptExecutionContext
    constructor -init
    -objectBeingTested
    -rangeContainerObject
    -setObjectBeingTested:
    -setRangeContainerObject:
    -setTopLevelObject:
    +sharedScriptExecutionContext
    -topLevelObject
    
class NSScriptSuiteRegistry = com.apple.cocoa.foundation.NSScriptSuiteRegistry
    -aeteResource:
    -appleEventCodeForSuite:
    -bundleForSuite:
    -classDescriptionsInSuite:
    -classDescriptionWithAppleEventCode:
    -commandDescriptionsInSuite:
    -commandDescriptionWithAppleEventClass:andAppleEventCode:
    constructor -init
    -loadSuitesFromBundle:
    -loadSuiteWithDictionary:fromBundle:
    -registerClassDescription:
    -registerCommandDescription:
    +setSharedScriptSuiteRegistry:
    +sharedScriptSuiteRegistry
    -suiteForAppleEventCode:
    -suiteNames

class NSSetCommand = com.apple.cocoa.foundation.NSSetCommand
    constructor -init
    constructor -initWithCommandDescription:
    -keySpecifier
    -setReceiversSpecifier:

class NSSpecifierTest = com.apple.cocoa.foundation.NSSpecifierTest
    constructor -init
    constructor -initWithObjectSpecifier:comparisonOperator:testObject:
    
    @{
public static final int EqualToComparison = 0;
public static final int LessThanOrEqualToComparison = 1;
public static final int LessThanComparison = 2;
public static final int GreaterThanOrEqualToComparison = 3;
public static final int GreaterThanComparison = 4;
public static final int BeginsWithComparison = 5;
public static final int EndsWithComparison = 6;
public static final int ContainsComparison = 7;
    @}

class NSUniqueIDSpecifier = com.apple.cocoa.foundation.NSUniqueIDSpecifier
    constructor -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerClassDescription:containerSpecifier:key:uniqueID:
    constructor -initWithContainerSpecifier:key:
    -setUniqueID:
    -uniqueID

class NSWhoseSpecifier = com.apple.cocoa.foundation.NSWhoseSpecifier
    -endSubelementIdentifier
    -endSubelementIndex
    constructor -init
    constructor -initWithContainerClassDescription:containerSpecifier:key:
    constructor -initWithContainerClassDescription:containerSpecifier:key:test:
    constructor -initWithContainerSpecifier:key:
    -setEndSubelementIdentifier:
    -setEndSubelementIndex:
    -setStartSubelementIdentifier:
    -setStartSubelementIndex:
    -setTest:
    -startSubelementIdentifier
    -startSubelementIndex
    -test

    @{
public static final int IndexSubelement = 0;
public static final int EverySubelement = 1;
public static final int MiddleSubelement = 2;
public static final int RandomSubelement = 3;
public static final int NoSubelement = 4;
    @}

class NSScriptWhoseTest = com.apple.cocoa.foundation.NSScriptWhoseTest
    constructor -init
    -isTrue

protocol NSScriptingKeyValueCoding = com.apple.cocoa.foundation.NSScriptingKeyValueCoding
    -valueAtIndex:inPropertyWithKey:
    -valueWithName:inPropertyWithKey:
    -valueWithUniqueID:inPropertyWithKey:
    -replaceValueAtIndex:inPropertyWithKey:withValue:
    -insertValue:atIndex:inPropertyWithKey:
    -removeValueAtIndex:fromPropertyWithKey:
    -insertValue:inPropertyWithKey:
    -coerceValue:forKey:

protocol NSComparisonMethods = com.apple.cocoa.foundation.NSComparisonMethods
    -isEqualTo:
    -isLessThanOrEqualTo:
    -isLessThan:
    -isGreaterThanOrEqualTo:
    -isGreaterThan:
    -isNotEqualTo:
    -doesContain:
    -isLike:
    -isCaseInsensitiveLike:

protocol NSScriptingComparisonMethods = com.apple.cocoa.foundation.NSScriptingComparisonMethods
    -scriptingIsEqualTo:
    -scriptingIsLessThanOrEqualTo:
    -scriptingIsLessThan:
    -scriptingIsGreaterThanOrEqualTo:
    -scriptingIsGreaterThan:
    -scriptingBeginsWith:
    -scriptingEndsWith:
    -scriptingContains:

class NSAppleEventDescriptor = com.apple.cocoa.foundation.NSAppleEventDescriptor
    -attributeDescriptorForKeyword:
    -booleanValue
    -coerceToDescriptorType:
    -descriptorAtIndex:
    -descriptorForKeyword:
    -enumCodeValue
    -eventClass
    -eventID
    -data
    -descriptorType
    +descriptorWithEnumCode:
    +descriptorWithInt32:
    +descriptorWithString:
    +descriptorWithTypeCode:
    constructor -initWithDescriptorType:data:
    constructor -initWithEventClass:eventID:targetDescriptor:returnID:transactionID:
    -insertDescriptor:atIndex:
    -int32Value
    -keywordForDescriptorAtIndex:
    +listDescriptor
    +nullDescriptor
    -numberOfItems
    -paramDescriptorForKeyword:
    +recordDescriptor
    -removeDescriptorAtIndex:
    -removeDescriptorWithKeyword:
    -removeParamDescriptorWithKeyword:
    -returnID
    -setAttributeDescriptor:forKeyword:
    -setDescriptor:forKeyword:
    -setParamDescriptor:forKeyword:
    -stringValue
    -transactionID
    -typeCodeValue

    @{

    public static native com.apple.cocoa.foundation.NSAppleEventDescriptor descriptorWithBoolean(boolean aBoolean);

    @}

class NSAppleScript = com.apple.cocoa.foundation.NSAppleScript
    constructor -_initWithContentsOfURL:andFillInErrorDict:
    constructor -initWithSource:
    -_compileAndFillInErrorDict:
    -_executeAndFillInErrorDict:
    -_executeAppleEvent:andFillInErrorDict:
    -isCompiled
    -richTextSource
    -source

    @{

        public static final String AppleScriptErrorMessage = "NSAppleScriptErrorMessage";
        public static final String AppleScriptErrorNumber = "NSAppleScriptErrorNumber";
        public static final String AppleScriptErrorAppName = "NSAppleScriptErrorAppName";
        public static final String AppleScriptErrorBriefMessage = "NSAppleScriptErrorBriefMessage";
        public static final String AppleScriptErrorRange = "NSAppleScriptErrorRange";

    @}
