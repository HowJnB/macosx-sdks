/* $Copyright: * * Copyright 1998-2000 by the Massachusetts Institute of Technology. *  * All rights reserved. *  * Permission to use, copy, modify, and distribute this software and its * documentation for any purpose and without fee is hereby granted, * provided that the above copyright notice appear in all copies and that * both that copyright notice and this permission notice appear in * supporting documentation, and that the name of M.I.T. not be used in * advertising or publicity pertaining to distribution of the software * without specific, written prior permission.  Furthermore if you modify * this software you must label your software as modified software and not * distribute it in such a fashion that it might be confused with the * original MIT software. M.I.T. makes no representations about the * suitability of this software for any purpose.  It is provided "as is" * without express or implied warranty. *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF * MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. *  * Individual source code files are copyright MIT, Cygnus Support, * OpenVision, Oracle, Sun Soft, FundsXpress, and others. *  * Project Athena, Athena, Athena MUSE, Discuss, Hesiod, Kerberos, Moira, * and Zephyr are trademarks of the Massachusetts Institute of Technology * (MIT).  No commercial use of these trademarks may be made without prior * written permission of MIT. *  * "Commercial use" means use of a name in a product or other for-profit * manner.  It does NOT prevent a commercial firm from referring to the MIT * trademarks in order to convey information (although in doing so, * recognition of their trademark status should be given). * $ *//* $Header: /cvs/macdev/mit/lib/ShlibResourcesLib/Headers/KerberosSupport/ShlibResources.h,v 1.16 2001/05/01 06:14:12 meeroh Exp $ */#pragma once#ifndef __SHLIB_RESOURCES_H__#	define __SHLIB_RESOURCES_H__#if TARGET_RT_MAC_CFM#	include <ConditionalMacros.h>#	include <Memory.h>#	include <CodeFragments.h>#	if TARGET_API_MAC_CARBON#		include <CFBundle.h>#	endif#else#	include <CoreServices/CoreServices.h>#endif#	include <KerberosSupport/FileTracker.h>/*	Documentation at: <http://web.mit.edu/macdev/mit/lib/MITAthena/doc/Shlib%20Resources.html> *//*	ShlibContext: a structure containing all information needed to make the shared		library resource file the current resource file, and to restore the 		original resource file after shared library resource file is no longer needed*/	struct ShlibContext {		ShlibFileRef	libraryFile;			/*	Library file reference */		SInt16			saveResFile;			/*	Remembered current res file */		SInt16			shlibResFile;			/*	Library resource file reference number */		Boolean			usingShlibResFile;		/*	True if currently using library resource file */		OSErr			resError;				/*	Error from resource manager													(needed to maintain bug-by-bug compatibility) */#if TARGET_API_MAC_CARBON		Boolean			isBundle;		CFBundleRef		bundle;#endif	};		typedef struct ShlibContext ShlibContext;		extern	ShlibContext	gShlibContext;	#		ifdef __cplusplus			extern "C" {#		endif /* __Cplusplus */#		if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)#			pragma import on#		endif		/*	Shlib_ResFileBegin and Shlib_ResFileEnd return the reference number of 			the current resource file after the call completes */					short	Shlib_ResFileBegin (			ShlibContext*	ioContext);		short	Shlib_ResFileEnd (			ShlibContext*	ioContext);		Boolean	Shlib_UsingResFile (			ShlibContext*	ioContext);					/* Initialization and termination */			#if TARGET_RT_MAC_CFM		OSErr		Shlib_InitializeResources (                        ShlibContext*	ioContext,			const	CFragInitBlock*	inInitBlock);#else                OSErr                Shlib_InitializeResources (                        ShlibContext* 	ioContext,                        CFBundleRef	inBundle);#endif		void Shlib_TerminateResources (			ShlibContext*	ioContext);			#		if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)#			pragma import reset#		endif#		ifdef __cplusplus			}#		endif /* __cplusplus */		/* Compatibility macros for shared libraries */#		define Shlib_UsingResFile_()									\			Shlib_UsingResFile (&gShlibContext)#		define Shlib_ResFileBegin_()								\			Shlib_ResFileBegin (&gShlibContext)#		define Shlib_ResFileEnd_()								\			Shlib_ResFileEnd (&gShlibContext)#		define Shlib_ResError_()								\			gShlibContext.resError#		define Shlib_InitializeResources_(inInitBlock)						\			Shlib_InitializeResources (&gShlibContext, inInitBlock)#		define Shlib_TerminateResources_()							\			Shlib_TerminateResources (&gShlibContext)#endif /* __SHLIB_RESOURCES_H__ */