/* $Copyright: * * Copyright 1998-2000 by the Massachusetts Institute of Technology. *  * All rights reserved. *  * Permission to use, copy, modify, and distribute this software and its * documentation for any purpose and without fee is hereby granted, * provided that the above copyright notice appear in all copies and that * both that copyright notice and this permission notice appear in * supporting documentation, and that the name of M.I.T. not be used in * advertising or publicity pertaining to distribution of the software * without specific, written prior permission.  Furthermore if you modify * this software you must label your software as modified software and not * distribute it in such a fashion that it might be confused with the * original MIT software. M.I.T. makes no representations about the * suitability of this software for any purpose.  It is provided "as is" * without express or implied warranty. *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF * MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. *  * Individual source code files are copyright MIT, Cygnus Support, * OpenVision, Oracle, Sun Soft, FundsXpress, and others. *  * Project Athena, Athena, Athena MUSE, Discuss, Hesiod, Kerberos, Moira, * and Zephyr are trademarks of the Massachusetts Institute of Technology * (MIT).  No commercial use of these trademarks may be made without prior * written permission of MIT. *  * "Commercial use" means use of a name in a product or other for-profit * manner.  It does NOT prevent a commercial firm from referring to the MIT * trademarks in order to convey information (although in doing so, * recognition of their trademark status should be given). * $ *//* $Header: /cvs/macdev/mit/lib/ShlibResourcesLib/Headers/KerberosSupport/FileTracker.h,v 1.4 2001/04/12 16:44:19 meeroh Exp $ */#ifndef __FileTracker_h__#define __FileTracker_h__#include <KerberosSupport/KerberosConditionalMacros.h>#if TARGET_RT_MAC_CFM#include <Files.h>#else#include <CoreServices/CoreServices.h>#endif#ifdef __cplusplusextern "C" {#endif#if PRAGMA_ONCE#pragma once#endif#if PRAGMA_IMPORT#pragma import on#endif#if PRAGMA_STRUCT_ALIGN	#pragma options align=mac68k#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(push, 2)#elif PRAGMA_STRUCT_PACK	#pragma pack(2)#endif/* Unique shared library file reference *//* struct rather than just typedef so that you can't make the mistakeof interchanging them with toolbox file references */typedef	struct {	UInt32	fileRef;} ShlibFileRef;#define ValidShlibFileRef(x) ((x).fileRef != 0xFFFFFFFF)#define InvalidateShlibFileRef(x) ((x).fileRef = 0xFFFFFFFF)OSErr	Shlib_MemorizeFSSpec (	const	FSSpec*			inFileSpec,			ShlibFileRef*	outFileRef);OSErrShlib_RecoverFSSpec (			ShlibFileRef	inFileRef,			FSSpec*			outFileSpec);OSErrShlib_ForgetFSSpec (			ShlibFileRef	inFileRef);#if PRAGMA_STRUCT_ALIGN	#pragma options align=reset#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(pop)#elif PRAGMA_STRUCT_PACK	#pragma pack()#endif#ifdef PRAGMA_IMPORT_OFF#pragma import off#elif PRAGMA_IMPORT#pragma import reset#endif#ifdef __cplusplus}#endif#endif /* __FileTracker_h__ */