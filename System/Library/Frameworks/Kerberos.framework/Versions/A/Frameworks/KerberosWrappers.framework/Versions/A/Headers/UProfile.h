/* * Utility classes for access to KerberosProfileLib */ #ifndef UProfile_h#define UProfile_h#include <stdexcept>#include <string>#include <KerberosProfile/KerberosProfile.h>#include <KerberosWrappers/UAutoPtr.h>#if TARGET_RT_MAC_MACHO    #include <CoreServices/CoreServices.h>    #define Export_#else    #include <MacTypes.h>    #ifdef CompilingKrbWrappers        #define Export_ __declspec (export)    #else        #define Export_ __declspec (import)    #endif#endif /* MACHO *//* * Deleter objects for various UAutoPtr incarnations */ class UProfileStringAutoPtrDeleter {	public: Export_ static void Delete (const char* inString);};class UProfileAutoPtrDeleter {	public: Export_ static void Delete (profile_t 	inString);};class UProfileIteratorAutoPtrDeleter {	public: Export_ static void Delete (void* 		inString);};class UProfileListAutoPtrDeleter {	public: Export_ static void Delete (char** 		inList);};typedef	UAutoPtr <char, UProfileStringAutoPtrDeleter>			UProfileOutputStringAutoPtr;typedef	UAutoPtr <const char, UProfileStringAutoPtrDeleter>		UProfileInputStringAutoPtr;typedef	UAutoPtr <struct _profile_t, UProfileAutoPtrDeleter>	UProfileAutoPtr;typedef UAutoPtr <void, UProfileIteratorAutoPtrDeleter>			UProfileIteratorAutoPtr;typedef UAutoPtr <char*, UProfileListAutoPtrDeleter>			UProfileListAutoPtr;typedef	UProfileOutputStringAutoPtr::UAutoPtrRef	UProfileOutputStringAutoPtrRef;typedef	UProfileInputStringAutoPtr::UAutoPtrRef		UProfileInputStringAutoPtrRef;typedef	UProfileAutoPtr::UAutoPtrRef				UProfileAutoPtrRef;typedef	UProfileIteratorAutoPtr::UAutoPtrRef		UProfileIteratorAutoPtrRef;typedef	UProfileListAutoPtr::UAutoPtrRef			UProfileListAutoPtrRef;/* *  */ class UProfileInputString:	public UProfileInputStringAutoPtr {public:		UProfileInputString ():			UProfileInputStringAutoPtr () {}		UProfileInputString (			const char*				inString):			UProfileInputStringAutoPtr (inString) {}		UProfileInputString (			UProfileInputStringAutoPtrRef		inReference):			UProfileInputStringAutoPtr (inReference) {}		~UProfileInputString () {}		UProfileInputString&			operator = (			UProfileInputStringAutoPtr::UAutoPtrRef	inOriginal) {			Reset (inOriginal.mPtr);			return *this;		}				UProfileInputString&			operator = (			UProfileInputString&	inOriginal) {			Reset (inOriginal.Release ());			return *this;		}				UProfileInputString&			operator = (			const char*	inOriginal) {			Reset (inOriginal);			return *this;		}};class UProfileOutputString:	public UProfileOutputStringAutoPtr {public:		UProfileOutputString ():			UProfileOutputStringAutoPtr () {}		UProfileOutputString (			char*				inString):			UProfileOutputStringAutoPtr (inString) {}		UProfileOutputString (			UProfileOutputStringAutoPtrRef		inReference):			UProfileOutputStringAutoPtr (inReference) {}		~UProfileOutputString () {}				operator const UProfileInputString () { return UProfileInputString (Get ()); }		UProfileOutputString&			operator = (			UProfileOutputStringAutoPtr::UAutoPtrRef	inOriginal) {			Reset (inOriginal.mPtr);			return *this;		}				UProfileOutputString&			operator = (			UProfileOutputString&	inOriginal) {			Reset (inOriginal.Release ());			return *this;		}				UProfileOutputString&			operator = (			char*	inOriginal) {			Reset (inOriginal);			return *this;		}}; /* * Utility class for manipulating profile lib lists. * Knows to free the list when appropriate */ class UProfileInputList {public:	Export_ UProfileInputList ();	Export_ UProfileInputList (		const char*			inItem1);	Export_ UProfileInputList (		const char*			inItem1,		const char*			inItem2);	Export_ UProfileInputList (		const char*			inItem1,		const char*			inItem2,		const char*			inItem3);	Export_ UProfileInputList (		const char*			inItem1,		const char*			inItem2,		const char*			inItem3,		const char*			inItem4);	Export_ UProfileInputList (		char**				inList);			const char** Get () const { return mItemsPtr; }private:	const char*				mItems [5];	const char **	mItemsPtr;};class UProfileOutputList:	public UProfileListAutoPtr {public:		UProfileOutputList ():			UProfileListAutoPtr () {}		UProfileOutputList (			char**				inProfileList):			UProfileListAutoPtr (inProfileList) {}		UProfileOutputList (			UProfileListAutoPtrRef		inReference):			UProfileListAutoPtr (inReference) {}		~UProfileOutputList () {}		Export_ const char*	operator [] (UInt32	inIndex);				operator	UProfileInputList () { return UProfileInputList (Get ()); }				UProfileOutputList&			operator = (			UProfileListAutoPtr::UAutoPtrRef	inOriginal) {			Reset (inOriginal.mPtr);			return *this;		}				UProfileOutputList&			operator = (			UProfileOutputList&	inOriginal) {			Reset (inOriginal.Release ());			return *this;		}				UProfileOutputList&			operator = (			char**	inOriginal) {			Reset (inOriginal);			return *this;		}		};/* * Utility class for using profile lib iterators. */ class UProfileIterator:	public UProfileIteratorAutoPtr {public:		UProfileIterator ():			UProfileIteratorAutoPtr () {}		UProfileIterator (			void*				inProfileHandle):			UProfileIteratorAutoPtr (inProfileHandle) {}		UProfileIterator (			UProfileIteratorAutoPtrRef		inReference):			UProfileIteratorAutoPtr (inReference) {}		~UProfileIterator () {}				UProfileIterator&			operator = (			UProfileIteratorAutoPtr::UAutoPtrRef	inOriginal) {			Reset (inOriginal.mPtr);			return *this;		}				UProfileIterator&			operator = (			UProfileIterator&	inOriginal) {			Reset (inOriginal.Release ());			return *this;		}				UProfileIterator&			operator = (			void*	inOriginal) {			Reset (inOriginal);			return *this;		}			Export_ Boolean		Next (					UProfileOutputString&	outName,					UProfileOutputString&	outValue);};/* * Utility class for manipulating profile lib profile. */ class UProfile:	public UProfileAutoPtr {public:		Export_ UProfile ();		UProfile (			profile_t				inProfileHandle):			UProfileAutoPtr (inProfileHandle) {}		UProfile (			UProfileAutoPtrRef		inReference):			UProfileAutoPtr (inReference) {}		~UProfile () {}				UProfile&			operator = (			UProfileAutoPtr::UAutoPtrRef	inOriginal) {			Reset (inOriginal.mPtr);			return *this;		}				UProfile&			operator = (			UProfile&	inOriginal) {			Reset (inOriginal.Release ());			return *this;		}				UProfile&			operator = (			profile_t	inOriginal) {			Reset (inOriginal);			return *this;		}			Export_ bool		GetBoolean (			const	UProfileInputList&	inName,			Boolean				inDefaultValue) const;	Export_ void		GetValues (			const	UProfileInputList&	inName,					UProfileOutputList&	outValues) const;				Export_ void		UpdateRelation (			const	UProfileInputList&		inName,			const	UProfileInputString&	inOldValue,			const	UProfileInputString&	inNewValue);				Export_ void		AddRelation (			const	UProfileInputList&		inName,			const	UProfileInputString&	inValue);	Export_ void		ClearRelation (			const	UProfileInputList&	inName);				Export_ UProfileIterator		NewIterator (			const	UProfileInputList&	inName,					int				inFlags) const;	class StProfileChanger {	public:			StProfileChanger (				UProfile&			inProfile):				mProfile (inProfile),				mWrite (true) {}			~StProfileChanger () { if (mWrite) Flush (); }				void			Abandon () { mWrite = false; }						void			Flush () { profile_flush (mProfile.Get ()); }				private:		UProfile&		mProfile;		bool			mWrite;				// Disallowed		StProfileChanger ();		StProfileChanger (const StProfileChanger&);		StProfileChanger& operator = (const StProfileChanger&);			};};/* * Exception class thrown by UProfile classes */ class UProfileRuntimeError:	public std::runtime_error {public:	explicit UProfileRuntimeError (		long		inError):		std::runtime_error ("UProfileRuntimeError"),		mError (inError) {}		long Error () const { return mError; }private:	long			mError;};/* Configuration file is well-formed, but something is missing */class UProfileConfigurationError:	public UProfileRuntimeError {public:	explicit UProfileConfigurationError (		long		inError):		UProfileRuntimeError (inError) {}};/* Configuration file is not well-formed */class UProfileSyntaxError:	public UProfileRuntimeError {public:	explicit UProfileSyntaxError (		long		inError):		UProfileRuntimeError (inError) {}};class UProfileLogicError:	public std::logic_error {public:	explicit UProfileLogicError (		long		inError):		std::logic_error ("UProfileLogicError"),		mError (inError) {}		long Error () const { return mError; }private:	long			mError;};#ifdef CompilingKrbWrappers	#undef Export_#endif#endif /* UProfile_h */