#ifndef UKerberos5Context_h_#define UKerberos5Context_h_#include <KerberosWrappers/UAutoPtr.h>#include <Kerberos5/Kerberos5.h>#if TARGET_RT_MAC_MACHO    #define Export_ #else    #ifdef CompilingKrbWrappers        #define Export_ __declspec (export)    #else        #define Export_ __declspec (import)    #endif#endif /* MACOSX */class UKerberos5ContextAutoPtrDeleter {	public: Export_ static void Delete (krb5_context		inContext);};typedef UAutoPtr <_krb5_context, UKerberos5ContextAutoPtrDeleter>	UKerberos5ContextAutoPtr;typedef UKerberos5ContextAutoPtr::UAutoPtrRef						UKerberos5ContextAutoPtrRef;class UKerberos5Context:	public UKerberos5ContextAutoPtr {public:		Export_ UKerberos5Context ();		UKerberos5Context (			krb5_context				inContext):			UKerberos5ContextAutoPtr (inContext) {}		UKerberos5Context (			UKerberos5ContextAutoPtrRef		inReference):			UKerberos5ContextAutoPtr (inReference) {}		~UKerberos5Context () {}		UKerberos5Context&			operator = (			UKerberos5ContextAutoPtr::UAutoPtrRef	inOriginal) {			Reset (inOriginal.mPtr);			return *this;		}				UKerberos5Context&			operator = (			UKerberos5Context&	inOriginal) {			Reset (inOriginal.Release ());			return *this;		}				UKerberos5Context&			operator = (			krb5_context		inOriginal) {			Reset (inOriginal);			return *this;		}		};/*  * The difference is that lazy context does not create a context until really needed */class ULazyKerberos5Context {	public:		struct ULazyKerberos5ContextRef {			ULazyKerberos5Context&		mAutoPtr;			ULazyKerberos5ContextRef (				const ULazyKerberos5Context&	inAutoPtr):				mAutoPtr (const_cast <ULazyKerberos5Context&> (inAutoPtr)) {}		};				explicit ULazyKerberos5Context (			_krb5_context*							inPointer = 0):			mPointer (inPointer) {		}				ULazyKerberos5Context (			ULazyKerberos5Context&				inOriginal):			mPointer (inOriginal.Release ()) {		}				ULazyKerberos5Context&			operator = (			ULazyKerberos5Context&		inOriginal) {			Reset (inOriginal.Release ());			return *this;		}				ULazyKerberos5Context (			ULazyKerberos5ContextRef			inOriginal):			mPointer (inOriginal.mAutoPtr.Release ()) {}				~ULazyKerberos5Context () {			if (mPointer != NULL) {				UKerberos5ContextAutoPtrDeleter::Delete (mPointer);			}		}				_krb5_context&						operator* () const {			return *Get ();		}				_krb5_context*						operator -> () const {			return Get ();		}				operator ULazyKerberos5ContextRef () const {			return ULazyKerberos5ContextRef (*this);		}				_krb5_context*						Get () const {			if (mPointer == NULL) {				InitializeContext ();			}			return mPointer;		}				_krb5_context*						Release () {			_krb5_context*	result = mPointer;			mPointer = NULL;			return result;		}				void					Reset (			_krb5_context*							inNewPointer) {			if (inNewPointer != mPointer) {				if (mPointer != NULL)					UKerberos5ContextAutoPtrDeleter::Delete (mPointer);				mPointer = inNewPointer;			}		}					private:				_krb5_context*	mPointer;				Export_ void InitializeContext () const;};#ifdef CompilingKrbWrappers	#undef Export_#endif#endif /* UKerberos5Context_h_ */