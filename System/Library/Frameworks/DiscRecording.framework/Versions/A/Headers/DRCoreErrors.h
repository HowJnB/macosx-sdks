/*
     File:       DiscRecording/DRCoreErrors.h
 
     Contains:   Error code interfaces for DiscRecording.
 
     Version:    Technology: Mac OS X
                 Release:    Mac OS X
 
     Copyright:  (c) 2002 by Apple Computer, Inc., all rights reserved
 
     Bugs?:      For bug reports, consult the following page on
                 the World Wide Web:
 
                     http://developer.apple.com/bugreporter/
 
*/
/*!
	@header	DRCoreErrors
	
	This header contains all of the error codes DiscRecording defines. 
	
	In addition DiscRecording provides functions to map OS errors it defines and sense information
	returned from device command errors	to localized string representations.
*/


#ifndef _H_DRCoreErrors
#define _H_DRCoreErrors

#if PRAGMA_ONCE
#pragma once
#endif

#ifndef __CORESERVICES__
#include <CoreServices/CoreServices.h>
#endif

#ifndef __AVAILABILITYMACROS__
#include <AvailabilityMacros.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

enum
{
	kDRFirstErr						= 0x80020000,
	kDRInternalErr					= kDRFirstErr,		/* Internal error occurred, its not your fault. */
	
	kDRDeviceAccessErr				= 0x80020020,		/* Device is not accessible, hardware gone, etc. */
	kDRDeviceBusyErr				= 0x80020021,		/* Device is being used by somebody else, sorry */
	kDRDeviceCommunicationErr		= 0x80020022,		/* Device failed to respond properly, unable to recover or retry. */
	kDRDeviceInvalidErr				= 0x80020023,		/* Attempt was made to use an invalid DRDeviceRef. */
	kDRDeviceNotReadyErr			= 0x80020024,		/* Device is unable to respond now, please try again later. */
	kDRDeviceNotSupportedErr		= 0x80020025,		/* Device is not supported for the requested burn operation. */
	
	kDRMediaBusyErr					= 0x80020040,		/* Media is busy, usually by an unmountable volume. */
	kDRMediaNotPresentErr			= 0x80020041,		/* Media isn't present, and needs to be. */
	kDRMediaNotWritableErr			= 0x80020042,		/* Media isn't writable, and needs to be. */
	kDRMediaNotSupportedErr			= 0x80020043,		/* Media isn't supported for the requested burn operation. */
	kDRMediaNotBlankErr				= 0x80020044,		/* Media isn't blank, and the requested operation needs it to be. */
	
	kDRBurnUnderrunErr				= 0x80020060,		/* Device drained buffer without burn underrun protection. */
	kDRBurnNotAllowedErr			= 0x80020061,		/* User is not allowed to burn to this device on this system. */
	kDRDataProductionErr			= 0x80020062,		/* Something bad happened while producing data for the burn */
	kDRVerificationFailedErr		= 0x80020063,		/* The data verification failed */
	kDRTooManyTracksForDVDErr		= 0x80020064,		/* DVD discs can contain only one track */
	kDRBadLayoutErr					= 0x80020065,		/* Too many tracks/sessions */
	kDRUserCanceledErr				= 0x80020066,		/* User canceled the burn */
	kDRFunctionNotSupportedErr		= 0x80020067,		/* The track producer can't do what you ask. */
	
	/* content errors */
	kDRFileModifiedDuringBurnErr	= 0x80020100,		/* File changed during flatten or burn */
	kDRFileLocationConflictErr		= 0x80020101,		/* The locations specified for two files were conflicting */
	kDRTooManyNameConflictsErr		= 0x80020102		/* Too many filename conflicts to resolve (10,000,000 or more) */
};

/*!
	@function 	DRCopyLocalizedStringForDiscRecordingError
	@abstract 	Maps an OS error code to a localized string.
	@discussion If a localized string cannot be found, it will return the error code 
				as a string to the caller.
	@param 		osError 	The OS error code.
	@result 	A value of type CFStringRef which contains the localized string. 
				This reference is implicitly retained by the caller. 
*/
CFStringRef DRCopyLocalizedStringForDiscRecordingError(OSStatus osError);

/*!
	@function 	DRCopyLocalizedStringForSenseCode
	@abstract 	Maps a SCSI sense code to a localized string.
	@discussion Takes the sense code passed in and finds the correct localized string corresponding
				to that code. If a localized string cannot be found, it will return the sense code 
				as a string to the caller.
				This function uses two files to perform it's job, the first one is the <b>SenseKey.plist</b>. This file
				contains the mappings from sense codes to the keys for the strings file. Which brings us to the
				<b>SenseKey.strings</b> file. This file is a localized resource which contains the language specific
				translations of the sense codes. The <b>SenseKey.plist</b> will probably never need to be modified,
				unless more sense codes are added to the specification.
	@param 		senseCode 	The sense code generated by a device that follows the SCSI standard.
	@result 	A value of type CFStringRef which contains the localized string. 
				This reference is implicitly retained by the caller. 
*/
CFStringRef DRCopyLocalizedStringForSenseCode(UInt8 senseCode);

/*!
	@function 	DRCopyLocalizedStringForAdditionalSense
	@abstract 	Maps a the Additional Sense Code (ASC) and Additional Sense Key Qualifier (ASCQ) to a localized string.
	@discussion Takes the ASC/ASCQ pair passed in and finds the correct localized string corresponding
				to that pair. The function attempts to find the exact pair, followed by one of the range ASC codes.
				If neither of those can be found, it will determine if the pair is reserved or a vendor specific pair and will
				return a string indicating that. If a localized string cannot be found, it will return the ASC and ASCQ codes 
				as a string to the caller.
				This function uses two files to perform it's job, the first one is the <b>SenseKey.plist</b>. This file
				contains the mappings from sense codes to the keys for the strings file. Which brings us to the
				<b>SenseKey.strings</b> file. This file is a localized resource which contains the language specific
				translations of the sense key codes. The <b>SenseKey.plist</b> will probably never need to be modified,
				unless more sense keys are added to the specification.
	@param 		ASC 	The Additional Sense Code generated by a device that follows the SCSI standard.
	@param 		ASCQ 	The Additional Sense Code Qualifier generated by a device that follows the SCSI standard.
	@result 	A value of type CFStringRef which contains the localized string. 
				This reference is implicitly retained by the caller. 
*/
CFStringRef DRCopyLocalizedStringForAdditionalSense(UInt8 ASC, UInt8 ASCQ);

/*!
	@const kDRErrorStatusKey
	@discussion	A key for the DRErrorStatus dictionary returned by any of the DRxxxCopyStatus calls or
				kDRxxxStatusChangedNotifications to describe a failure.  The value of this key is a
				CFDictionary containing error code and device sense information.
*/
extern const CFStringRef kDRErrorStatusKey							AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;

/*!
	@const kDRErrorStatusErrorKey
	@discussion	A key for the DRErrorStatus dictionary. The value of this key is a CFNumber containing
				the OSStatus describing the failure.
*/
extern const CFStringRef kDRErrorStatusErrorKey						AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;

/*!
	@const kDRErrorStatusErrorStringKey
	@discussion	A key for the DRErrorStatus dictionary. The value of this key is a CFString containing
				the localized string describing the kDRErrorStatusErrorKey.  This value is optional and
				may not be present if a suitable string does not exist to describe the failure.
*/
extern const CFStringRef kDRErrorStatusErrorStringKey				AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;

/*!
	@const kDRErrorStatusSenseKey
	@discussion	A key for the DRErrorStatus dictionary. The value of this key is a CFData containing
				the device sense data describing the failure.  This value is optional and may not be
				present if the failure was not device related, or if the device failed in a way which
				did not provide meaningful sense data.
*/
extern const CFStringRef kDRErrorStatusSenseKey						AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;

/*!
	@const kDRErrorStatusSenseCodeStringKey
	@discussion	A key for the DRErrorStatus dictionary. The value of this key is a CFString containing
				the localized string describing the sense key from the sense data describing the failure.
				This value is optional and will not be present if kDRErrorStatusSenseKey is not present
				or if a suitable string does not exist to describe the failure.
*/
extern const CFStringRef kDRErrorStatusSenseCodeStringKey			AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;

/*!
	@const kDRErrorStatusAdditionalSenseStringKey
	@discussion	A key for the DRErrorStatus dictionary. The value of this key is a CFString containing
				the localized string describing the additonal sense from the sense data describing the
				failure.  This value is optional and will not be present if kDRErrorStatusSenseKey is
				not present or if a suitable string does not exist to describe the failure.
*/
extern const CFStringRef kDRErrorStatusAdditionalSenseStringKey		AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER;

#ifdef __cplusplus
}
#endif

#endif /* _H_DRCoreErrors */
