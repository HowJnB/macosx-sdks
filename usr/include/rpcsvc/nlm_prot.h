/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NLM_PROT_H_RPCGEN
#define _NLM_PROT_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>

#define LM_MAXSTRLEN	1024
#define MAXNAMELEN	LM_MAXSTRLEN+1

enum nlm_stats {
	nlm_granted = 0,
	nlm_denied = 1,
	nlm_denied_nolocks = 2,
	nlm_blocked = 3,
	nlm_denied_grace_period = 4,
};
typedef enum nlm_stats nlm_stats;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_stats(XDR *, nlm_stats*);
#elif __STDC__
extern  bool_t xdr_nlm_stats(XDR *, nlm_stats*);
#else /* Old Style C */
bool_t xdr_nlm_stats();
#endif /* Old Style C */


struct nlm_holder {
	bool_t exclusive;
	int svid;
	netobj oh;
	u_int l_offset;
	u_int l_len;
};
typedef struct nlm_holder nlm_holder;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_holder(XDR *, nlm_holder*);
#elif __STDC__
extern  bool_t xdr_nlm_holder(XDR *, nlm_holder*);
#else /* Old Style C */
bool_t xdr_nlm_holder();
#endif /* Old Style C */


struct nlm_testrply {
	nlm_stats stat;
	union {
		struct nlm_holder holder;
	} nlm_testrply_u;
};
typedef struct nlm_testrply nlm_testrply;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_testrply(XDR *, nlm_testrply*);
#elif __STDC__
extern  bool_t xdr_nlm_testrply(XDR *, nlm_testrply*);
#else /* Old Style C */
bool_t xdr_nlm_testrply();
#endif /* Old Style C */


struct nlm_stat {
	nlm_stats stat;
};
typedef struct nlm_stat nlm_stat;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_stat(XDR *, nlm_stat*);
#elif __STDC__
extern  bool_t xdr_nlm_stat(XDR *, nlm_stat*);
#else /* Old Style C */
bool_t xdr_nlm_stat();
#endif /* Old Style C */


struct nlm_res {
	netobj cookie;
	nlm_stat stat;
};
typedef struct nlm_res nlm_res;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_res(XDR *, nlm_res*);
#elif __STDC__
extern  bool_t xdr_nlm_res(XDR *, nlm_res*);
#else /* Old Style C */
bool_t xdr_nlm_res();
#endif /* Old Style C */


struct nlm_testres {
	netobj cookie;
	nlm_testrply stat;
};
typedef struct nlm_testres nlm_testres;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_testres(XDR *, nlm_testres*);
#elif __STDC__
extern  bool_t xdr_nlm_testres(XDR *, nlm_testres*);
#else /* Old Style C */
bool_t xdr_nlm_testres();
#endif /* Old Style C */


struct nlm_lock {
	char *caller_name;
	netobj fh;
	netobj oh;
	int svid;
	u_int l_offset;
	u_int l_len;
};
typedef struct nlm_lock nlm_lock;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_lock(XDR *, nlm_lock*);
#elif __STDC__
extern  bool_t xdr_nlm_lock(XDR *, nlm_lock*);
#else /* Old Style C */
bool_t xdr_nlm_lock();
#endif /* Old Style C */


struct nlm_lockargs {
	netobj cookie;
	bool_t block;
	bool_t exclusive;
	struct nlm_lock alock;
	bool_t reclaim;
	int state;
};
typedef struct nlm_lockargs nlm_lockargs;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_lockargs(XDR *, nlm_lockargs*);
#elif __STDC__
extern  bool_t xdr_nlm_lockargs(XDR *, nlm_lockargs*);
#else /* Old Style C */
bool_t xdr_nlm_lockargs();
#endif /* Old Style C */


struct nlm_cancargs {
	netobj cookie;
	bool_t block;
	bool_t exclusive;
	struct nlm_lock alock;
};
typedef struct nlm_cancargs nlm_cancargs;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_cancargs(XDR *, nlm_cancargs*);
#elif __STDC__
extern  bool_t xdr_nlm_cancargs(XDR *, nlm_cancargs*);
#else /* Old Style C */
bool_t xdr_nlm_cancargs();
#endif /* Old Style C */


struct nlm_testargs {
	netobj cookie;
	bool_t exclusive;
	struct nlm_lock alock;
};
typedef struct nlm_testargs nlm_testargs;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_testargs(XDR *, nlm_testargs*);
#elif __STDC__
extern  bool_t xdr_nlm_testargs(XDR *, nlm_testargs*);
#else /* Old Style C */
bool_t xdr_nlm_testargs();
#endif /* Old Style C */


struct nlm_unlockargs {
	netobj cookie;
	struct nlm_lock alock;
};
typedef struct nlm_unlockargs nlm_unlockargs;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_unlockargs(XDR *, nlm_unlockargs*);
#elif __STDC__
extern  bool_t xdr_nlm_unlockargs(XDR *, nlm_unlockargs*);
#else /* Old Style C */
bool_t xdr_nlm_unlockargs();
#endif /* Old Style C */

/*
 * The following enums are actually bit encoded for efficient
 * boolean algebra.... DON'T change them.....
 */

enum fsh_mode {
	fsm_DN = 0,
	fsm_DR = 1,
	fsm_DW = 2,
	fsm_DRW = 3,
};
typedef enum fsh_mode fsh_mode;
#ifdef __cplusplus
extern "C" bool_t xdr_fsh_mode(XDR *, fsh_mode*);
#elif __STDC__
extern  bool_t xdr_fsh_mode(XDR *, fsh_mode*);
#else /* Old Style C */
bool_t xdr_fsh_mode();
#endif /* Old Style C */


enum fsh_access {
	fsa_NONE = 0,
	fsa_R = 1,
	fsa_W = 2,
	fsa_RW = 3,
};
typedef enum fsh_access fsh_access;
#ifdef __cplusplus
extern "C" bool_t xdr_fsh_access(XDR *, fsh_access*);
#elif __STDC__
extern  bool_t xdr_fsh_access(XDR *, fsh_access*);
#else /* Old Style C */
bool_t xdr_fsh_access();
#endif /* Old Style C */


struct nlm_share {
	char *caller_name;
	netobj fh;
	netobj oh;
	fsh_mode mode;
	fsh_access access;
};
typedef struct nlm_share nlm_share;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_share(XDR *, nlm_share*);
#elif __STDC__
extern  bool_t xdr_nlm_share(XDR *, nlm_share*);
#else /* Old Style C */
bool_t xdr_nlm_share();
#endif /* Old Style C */


struct nlm_shareargs {
	netobj cookie;
	nlm_share share;
	bool_t reclaim;
};
typedef struct nlm_shareargs nlm_shareargs;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_shareargs(XDR *, nlm_shareargs*);
#elif __STDC__
extern  bool_t xdr_nlm_shareargs(XDR *, nlm_shareargs*);
#else /* Old Style C */
bool_t xdr_nlm_shareargs();
#endif /* Old Style C */


struct nlm_shareres {
	netobj cookie;
	nlm_stats stat;
	int sequence;
};
typedef struct nlm_shareres nlm_shareres;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_shareres(XDR *, nlm_shareres*);
#elif __STDC__
extern  bool_t xdr_nlm_shareres(XDR *, nlm_shareres*);
#else /* Old Style C */
bool_t xdr_nlm_shareres();
#endif /* Old Style C */


struct nlm_notify {
	char *name;
	long state;
};
typedef struct nlm_notify nlm_notify;
#ifdef __cplusplus
extern "C" bool_t xdr_nlm_notify(XDR *, nlm_notify*);
#elif __STDC__
extern  bool_t xdr_nlm_notify(XDR *, nlm_notify*);
#else /* Old Style C */
bool_t xdr_nlm_notify();
#endif /* Old Style C */


#define NLM_PROG ((u_long)100021)
#define NLM_VERS ((u_long)1)

#ifdef __cplusplus
#define NLM_TEST ((u_long)1)
extern "C" nlm_testres * nlm_test_1(struct nlm_testargs *, CLIENT *);
extern "C" nlm_testres * nlm_test_1_svc(struct nlm_testargs *, struct svc_req *);
#define NLM_LOCK ((u_long)2)
extern "C" nlm_res * nlm_lock_1(struct nlm_lockargs *, CLIENT *);
extern "C" nlm_res * nlm_lock_1_svc(struct nlm_lockargs *, struct svc_req *);
#define NLM_CANCEL ((u_long)3)
extern "C" nlm_res * nlm_cancel_1(struct nlm_cancargs *, CLIENT *);
extern "C" nlm_res * nlm_cancel_1_svc(struct nlm_cancargs *, struct svc_req *);
#define NLM_UNLOCK ((u_long)4)
extern "C" nlm_res * nlm_unlock_1(struct nlm_unlockargs *, CLIENT *);
extern "C" nlm_res * nlm_unlock_1_svc(struct nlm_unlockargs *, struct svc_req *);
#define NLM_GRANTED ((u_long)5)
extern "C" nlm_res * nlm_granted_1(struct nlm_testargs *, CLIENT *);
extern "C" nlm_res * nlm_granted_1_svc(struct nlm_testargs *, struct svc_req *);
#define NLM_TEST_MSG ((u_long)6)
extern "C" void * nlm_test_msg_1(struct nlm_testargs *, CLIENT *);
extern "C" void * nlm_test_msg_1_svc(struct nlm_testargs *, struct svc_req *);
#define NLM_LOCK_MSG ((u_long)7)
extern "C" void * nlm_lock_msg_1(struct nlm_lockargs *, CLIENT *);
extern "C" void * nlm_lock_msg_1_svc(struct nlm_lockargs *, struct svc_req *);
#define NLM_CANCEL_MSG ((u_long)8)
extern "C" void * nlm_cancel_msg_1(struct nlm_cancargs *, CLIENT *);
extern "C" void * nlm_cancel_msg_1_svc(struct nlm_cancargs *, struct svc_req *);
#define NLM_UNLOCK_MSG ((u_long)9)
extern "C" void * nlm_unlock_msg_1(struct nlm_unlockargs *, CLIENT *);
extern "C" void * nlm_unlock_msg_1_svc(struct nlm_unlockargs *, struct svc_req *);
#define NLM_GRANTED_MSG ((u_long)10)
extern "C" void * nlm_granted_msg_1(struct nlm_testargs *, CLIENT *);
extern "C" void * nlm_granted_msg_1_svc(struct nlm_testargs *, struct svc_req *);
#define NLM_TEST_RES ((u_long)11)
extern "C" void * nlm_test_res_1(nlm_testres *, CLIENT *);
extern "C" void * nlm_test_res_1_svc(nlm_testres *, struct svc_req *);
#define NLM_LOCK_RES ((u_long)12)
extern "C" void * nlm_lock_res_1(nlm_res *, CLIENT *);
extern "C" void * nlm_lock_res_1_svc(nlm_res *, struct svc_req *);
#define NLM_CANCEL_RES ((u_long)13)
extern "C" void * nlm_cancel_res_1(nlm_res *, CLIENT *);
extern "C" void * nlm_cancel_res_1_svc(nlm_res *, struct svc_req *);
#define NLM_UNLOCK_RES ((u_long)14)
extern "C" void * nlm_unlock_res_1(nlm_res *, CLIENT *);
extern "C" void * nlm_unlock_res_1_svc(nlm_res *, struct svc_req *);
#define NLM_GRANTED_RES ((u_long)15)
extern "C" void * nlm_granted_res_1(nlm_res *, CLIENT *);
extern "C" void * nlm_granted_res_1_svc(nlm_res *, struct svc_req *);

#elif __STDC__
#define NLM_TEST ((u_long)1)
extern  nlm_testres * nlm_test_1(struct nlm_testargs *, CLIENT *);
extern  nlm_testres * nlm_test_1_svc(struct nlm_testargs *, struct svc_req *);
#define NLM_LOCK ((u_long)2)
extern  nlm_res * nlm_lock_1(struct nlm_lockargs *, CLIENT *);
extern  nlm_res * nlm_lock_1_svc(struct nlm_lockargs *, struct svc_req *);
#define NLM_CANCEL ((u_long)3)
extern  nlm_res * nlm_cancel_1(struct nlm_cancargs *, CLIENT *);
extern  nlm_res * nlm_cancel_1_svc(struct nlm_cancargs *, struct svc_req *);
#define NLM_UNLOCK ((u_long)4)
extern  nlm_res * nlm_unlock_1(struct nlm_unlockargs *, CLIENT *);
extern  nlm_res * nlm_unlock_1_svc(struct nlm_unlockargs *, struct svc_req *);
#define NLM_GRANTED ((u_long)5)
extern  nlm_res * nlm_granted_1(struct nlm_testargs *, CLIENT *);
extern  nlm_res * nlm_granted_1_svc(struct nlm_testargs *, struct svc_req *);
#define NLM_TEST_MSG ((u_long)6)
extern  void * nlm_test_msg_1(struct nlm_testargs *, CLIENT *);
extern  void * nlm_test_msg_1_svc(struct nlm_testargs *, struct svc_req *);
#define NLM_LOCK_MSG ((u_long)7)
extern  void * nlm_lock_msg_1(struct nlm_lockargs *, CLIENT *);
extern  void * nlm_lock_msg_1_svc(struct nlm_lockargs *, struct svc_req *);
#define NLM_CANCEL_MSG ((u_long)8)
extern  void * nlm_cancel_msg_1(struct nlm_cancargs *, CLIENT *);
extern  void * nlm_cancel_msg_1_svc(struct nlm_cancargs *, struct svc_req *);
#define NLM_UNLOCK_MSG ((u_long)9)
extern  void * nlm_unlock_msg_1(struct nlm_unlockargs *, CLIENT *);
extern  void * nlm_unlock_msg_1_svc(struct nlm_unlockargs *, struct svc_req *);
#define NLM_GRANTED_MSG ((u_long)10)
extern  void * nlm_granted_msg_1(struct nlm_testargs *, CLIENT *);
extern  void * nlm_granted_msg_1_svc(struct nlm_testargs *, struct svc_req *);
#define NLM_TEST_RES ((u_long)11)
extern  void * nlm_test_res_1(nlm_testres *, CLIENT *);
extern  void * nlm_test_res_1_svc(nlm_testres *, struct svc_req *);
#define NLM_LOCK_RES ((u_long)12)
extern  void * nlm_lock_res_1(nlm_res *, CLIENT *);
extern  void * nlm_lock_res_1_svc(nlm_res *, struct svc_req *);
#define NLM_CANCEL_RES ((u_long)13)
extern  void * nlm_cancel_res_1(nlm_res *, CLIENT *);
extern  void * nlm_cancel_res_1_svc(nlm_res *, struct svc_req *);
#define NLM_UNLOCK_RES ((u_long)14)
extern  void * nlm_unlock_res_1(nlm_res *, CLIENT *);
extern  void * nlm_unlock_res_1_svc(nlm_res *, struct svc_req *);
#define NLM_GRANTED_RES ((u_long)15)
extern  void * nlm_granted_res_1(nlm_res *, CLIENT *);
extern  void * nlm_granted_res_1_svc(nlm_res *, struct svc_req *);

#else /* Old Style C */
#define NLM_TEST ((u_long)1)
extern  nlm_testres * nlm_test_1();
extern  nlm_testres * nlm_test_1_svc();
#define NLM_LOCK ((u_long)2)
extern  nlm_res * nlm_lock_1();
extern  nlm_res * nlm_lock_1_svc();
#define NLM_CANCEL ((u_long)3)
extern  nlm_res * nlm_cancel_1();
extern  nlm_res * nlm_cancel_1_svc();
#define NLM_UNLOCK ((u_long)4)
extern  nlm_res * nlm_unlock_1();
extern  nlm_res * nlm_unlock_1_svc();
#define NLM_GRANTED ((u_long)5)
extern  nlm_res * nlm_granted_1();
extern  nlm_res * nlm_granted_1_svc();
#define NLM_TEST_MSG ((u_long)6)
extern  void * nlm_test_msg_1();
extern  void * nlm_test_msg_1_svc();
#define NLM_LOCK_MSG ((u_long)7)
extern  void * nlm_lock_msg_1();
extern  void * nlm_lock_msg_1_svc();
#define NLM_CANCEL_MSG ((u_long)8)
extern  void * nlm_cancel_msg_1();
extern  void * nlm_cancel_msg_1_svc();
#define NLM_UNLOCK_MSG ((u_long)9)
extern  void * nlm_unlock_msg_1();
extern  void * nlm_unlock_msg_1_svc();
#define NLM_GRANTED_MSG ((u_long)10)
extern  void * nlm_granted_msg_1();
extern  void * nlm_granted_msg_1_svc();
#define NLM_TEST_RES ((u_long)11)
extern  void * nlm_test_res_1();
extern  void * nlm_test_res_1_svc();
#define NLM_LOCK_RES ((u_long)12)
extern  void * nlm_lock_res_1();
extern  void * nlm_lock_res_1_svc();
#define NLM_CANCEL_RES ((u_long)13)
extern  void * nlm_cancel_res_1();
extern  void * nlm_cancel_res_1_svc();
#define NLM_UNLOCK_RES ((u_long)14)
extern  void * nlm_unlock_res_1();
extern  void * nlm_unlock_res_1_svc();
#define NLM_GRANTED_RES ((u_long)15)
extern  void * nlm_granted_res_1();
extern  void * nlm_granted_res_1_svc();
#endif /* Old Style C */
#define NLM_VERSX ((u_long)3)

#ifdef __cplusplus
#define NLM_SHARE ((u_long)20)
extern "C" nlm_shareres * nlm_share_3(nlm_shareargs *, CLIENT *);
extern "C" nlm_shareres * nlm_share_3_svc(nlm_shareargs *, struct svc_req *);
#define NLM_UNSHARE ((u_long)21)
extern "C" nlm_shareres * nlm_unshare_3(nlm_shareargs *, CLIENT *);
extern "C" nlm_shareres * nlm_unshare_3_svc(nlm_shareargs *, struct svc_req *);
#define NLM_NM_LOCK ((u_long)22)
extern "C" nlm_res * nlm_nm_lock_3(nlm_lockargs *, CLIENT *);
extern "C" nlm_res * nlm_nm_lock_3_svc(nlm_lockargs *, struct svc_req *);
#define NLM_FREE_ALL ((u_long)23)
extern "C" void * nlm_free_all_3(nlm_notify *, CLIENT *);
extern "C" void * nlm_free_all_3_svc(nlm_notify *, struct svc_req *);

#elif __STDC__
#define NLM_SHARE ((u_long)20)
extern  nlm_shareres * nlm_share_3(nlm_shareargs *, CLIENT *);
extern  nlm_shareres * nlm_share_3_svc(nlm_shareargs *, struct svc_req *);
#define NLM_UNSHARE ((u_long)21)
extern  nlm_shareres * nlm_unshare_3(nlm_shareargs *, CLIENT *);
extern  nlm_shareres * nlm_unshare_3_svc(nlm_shareargs *, struct svc_req *);
#define NLM_NM_LOCK ((u_long)22)
extern  nlm_res * nlm_nm_lock_3(nlm_lockargs *, CLIENT *);
extern  nlm_res * nlm_nm_lock_3_svc(nlm_lockargs *, struct svc_req *);
#define NLM_FREE_ALL ((u_long)23)
extern  void * nlm_free_all_3(nlm_notify *, CLIENT *);
extern  void * nlm_free_all_3_svc(nlm_notify *, struct svc_req *);

#else /* Old Style C */
#define NLM_SHARE ((u_long)20)
extern  nlm_shareres * nlm_share_3();
extern  nlm_shareres * nlm_share_3_svc();
#define NLM_UNSHARE ((u_long)21)
extern  nlm_shareres * nlm_unshare_3();
extern  nlm_shareres * nlm_unshare_3_svc();
#define NLM_NM_LOCK ((u_long)22)
extern  nlm_res * nlm_nm_lock_3();
extern  nlm_res * nlm_nm_lock_3_svc();
#define NLM_FREE_ALL ((u_long)23)
extern  void * nlm_free_all_3();
extern  void * nlm_free_all_3_svc();
#endif /* Old Style C */

#endif /* !_NLM_PROT_H_RPCGEN */
