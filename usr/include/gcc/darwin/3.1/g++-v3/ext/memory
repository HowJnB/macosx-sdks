// Memory extensions -*- C++ -*-

// Copyright (C) 2002 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

/*
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Hewlett-Packard Company makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 *
 *
 * Copyright (c) 1996
 * Silicon Graphics Computer Systems, Inc.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Silicon Graphics makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

#ifndef _EXT_MEMORY
#define _EXT_MEMORY

#pragma GCC system_header
#include <memory>

namespace __gnu_cxx
{
  using std::ptrdiff_t;
  using std::pair;
  using std::__iterator_category;
  using std::_Temporary_buffer;
  
  // uninitialized_copy_n (not part of the C++ standard)

  template<typename _InputIter, typename _Size, typename _ForwardIter>
    pair<_InputIter, _ForwardIter>
    __uninitialized_copy_n(_InputIter __first, _Size __count,
			   _ForwardIter __result,
			   std::input_iterator_tag)
    {
      _ForwardIter __cur = __result;
      try {
	for ( ; __count > 0 ; --__count, ++__first, ++__cur) 
	  std::_Construct(&*__cur, *__first);
	return pair<_InputIter, _ForwardIter>(__first, __cur);
      }
      catch(...)
	{
	  std::_Destroy(__result, __cur);
	  __throw_exception_again; 
	}
    }

  template<typename _RandomAccessIter, typename _Size, typename _ForwardIter>
    inline pair<_RandomAccessIter, _ForwardIter>
    __uninitialized_copy_n(_RandomAccessIter __first, _Size __count,
			   _ForwardIter __result,
			   std::random_access_iterator_tag)
    {
      _RandomAccessIter __last = __first + __count;
      return pair<_RandomAccessIter, _ForwardIter>(
		     __last,
		     std::uninitialized_copy(__first, __last, __result));
    }

  template<typename _InputIter, typename _Size, typename _ForwardIter>
    inline pair<_InputIter, _ForwardIter>
    __uninitialized_copy_n(_InputIter __first, _Size __count,
			 _ForwardIter __result) {
      return __uninitialized_copy_n(__first, __count, __result,
				    __iterator_category(__first));
    }

  /**
   *  @brief Copies the range [first,last) into result.
   *  @param  first  An input iterator.
   *  @param  last   An input iterator.
   *  @param  result An output iterator.
   *  @return   result + (first - last)
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIter, typename _Size, typename _ForwardIter>
    inline pair<_InputIter, _ForwardIter>
    uninitialized_copy_n(_InputIter __first, _Size __count,
			 _ForwardIter __result) {
      return __uninitialized_copy_n(__first, __count, __result,
				    __iterator_category(__first));
    }

  template <class _Tp>
  pair<_Tp*, ptrdiff_t> 
  __get_temporary_buffer(ptrdiff_t __len, _Tp*)
  {
    if (__len > ptrdiff_t(INT_MAX / sizeof(_Tp)))
      __len = INT_MAX / sizeof(_Tp);

    while (__len > 0) {
      _Tp* __tmp = (_Tp*) std::malloc((std::size_t)__len * sizeof(_Tp));
      if (__tmp != 0)
	return pair<_Tp*, ptrdiff_t>(__tmp, __len);
      __len /= 2;
    }

    return pair<_Tp*, ptrdiff_t>((_Tp*)0, 0);
  }

  /**
   *  This is a mostly-useless wrapper around malloc().
   */
  template <class _Tp>
  inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {
    return __get_temporary_buffer(__len, (_Tp*) 0);
  }

  /**
   *  The companion to get_temporary_buffer().
   */
  template <class _Tp>
  void return_temporary_buffer(_Tp* __p) {
    std::free(__p);
  }

  // Class temporary_buffer is not part of the standard.  It is an extension.

  template <class _ForwardIterator, 
	    class _Tp 
	    = typename std::iterator_traits<_ForwardIterator>::value_type
  >
  struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>
  {
    temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
      : _Temporary_buffer<_ForwardIterator, _Tp>(__first, __last) {}
    ~temporary_buffer() {}
  };

} // namespace __gnu_cxx

#endif /* _EXT_MEMORY */

