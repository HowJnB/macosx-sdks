/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NIBIND_PROT_H_RPCGEN
#define _NIBIND_PROT_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>

/*
 * Output of the RPC protocol compiler: DO NOT EDIT
 * Copyright (C) 1989 by NeXT, Inc.
 */
#ifndef NI_PROG
#include <netinfo/ni_prot.h>
#endif
#define NIBIND_MAXREGS 32

struct nibind_addrinfo {
	u_int udp_port;
	u_int tcp_port;
};
typedef struct nibind_addrinfo nibind_addrinfo;
#ifdef __cplusplus
extern "C" bool_t xdr_nibind_addrinfo(XDR *, nibind_addrinfo*);
#elif __STDC__
extern  bool_t xdr_nibind_addrinfo(XDR *, nibind_addrinfo*);
#else /* Old Style C */
bool_t xdr_nibind_addrinfo();
#endif /* Old Style C */


struct nibind_registration {
	ni_name tag;
	nibind_addrinfo addrs;
};
typedef struct nibind_registration nibind_registration;
#ifdef __cplusplus
extern "C" bool_t xdr_nibind_registration(XDR *, nibind_registration*);
#elif __STDC__
extern  bool_t xdr_nibind_registration(XDR *, nibind_registration*);
#else /* Old Style C */
bool_t xdr_nibind_registration();
#endif /* Old Style C */


struct nibind_getregister_res {
	ni_status status;
	union {
		nibind_addrinfo addrs;
	} nibind_getregister_res_u;
};
typedef struct nibind_getregister_res nibind_getregister_res;
#ifdef __cplusplus
extern "C" bool_t xdr_nibind_getregister_res(XDR *, nibind_getregister_res*);
#elif __STDC__
extern  bool_t xdr_nibind_getregister_res(XDR *, nibind_getregister_res*);
#else /* Old Style C */
bool_t xdr_nibind_getregister_res();
#endif /* Old Style C */


struct nibind_listreg_res {
	ni_status status;
	union {
		struct {
			u_int regs_len;
			nibind_registration *regs_val;
		} regs;
	} nibind_listreg_res_u;
};
typedef struct nibind_listreg_res nibind_listreg_res;
#ifdef __cplusplus
extern "C" bool_t xdr_nibind_listreg_res(XDR *, nibind_listreg_res*);
#elif __STDC__
extern  bool_t xdr_nibind_listreg_res(XDR *, nibind_listreg_res*);
#else /* Old Style C */
bool_t xdr_nibind_listreg_res();
#endif /* Old Style C */


struct nibind_clone_args {
	ni_name tag;
	ni_name master_name;
	u_int master_addr;
	ni_name master_tag;
};
typedef struct nibind_clone_args nibind_clone_args;
#ifdef __cplusplus
extern "C" bool_t xdr_nibind_clone_args(XDR *, nibind_clone_args*);
#elif __STDC__
extern  bool_t xdr_nibind_clone_args(XDR *, nibind_clone_args*);
#else /* Old Style C */
bool_t xdr_nibind_clone_args();
#endif /* Old Style C */


struct nibind_bind_args {
	u_int client_addr;
	ni_name client_tag;
	ni_name server_tag;
};
typedef struct nibind_bind_args nibind_bind_args;
#ifdef __cplusplus
extern "C" bool_t xdr_nibind_bind_args(XDR *, nibind_bind_args*);
#elif __STDC__
extern  bool_t xdr_nibind_bind_args(XDR *, nibind_bind_args*);
#else /* Old Style C */
bool_t xdr_nibind_bind_args();
#endif /* Old Style C */


#define NIBIND_PROG ((u_long)200100001)
#define NIBIND_VERS ((u_long)1)

#ifdef __cplusplus
#define NIBIND_PING ((u_long)0)
extern "C" void * nibind_ping_1(void *, CLIENT *);
extern "C" void * nibind_ping_1_svc(void *, struct svc_req *);
#define NIBIND_REGISTER ((u_long)1)
extern "C" ni_status * nibind_register_1(nibind_registration *, CLIENT *);
extern "C" ni_status * nibind_register_1_svc(nibind_registration *, struct svc_req *);
#define NIBIND_UNREGISTER ((u_long)2)
extern "C" ni_status * nibind_unregister_1(ni_name *, CLIENT *);
extern "C" ni_status * nibind_unregister_1_svc(ni_name *, struct svc_req *);
#define NIBIND_GETREGISTER ((u_long)3)
extern "C" nibind_getregister_res * nibind_getregister_1(ni_name *, CLIENT *);
extern "C" nibind_getregister_res * nibind_getregister_1_svc(ni_name *, struct svc_req *);
#define NIBIND_LISTREG ((u_long)4)
extern "C" nibind_listreg_res * nibind_listreg_1(void *, CLIENT *);
extern "C" nibind_listreg_res * nibind_listreg_1_svc(void *, struct svc_req *);
#define NIBIND_CREATEMASTER ((u_long)5)
extern "C" ni_status * nibind_createmaster_1(ni_name *, CLIENT *);
extern "C" ni_status * nibind_createmaster_1_svc(ni_name *, struct svc_req *);
#define NIBIND_CREATECLONE ((u_long)6)
extern "C" ni_status * nibind_createclone_1(nibind_clone_args *, CLIENT *);
extern "C" ni_status * nibind_createclone_1_svc(nibind_clone_args *, struct svc_req *);
#define NIBIND_DESTROYDOMAIN ((u_long)7)
extern "C" ni_status * nibind_destroydomain_1(ni_name *, CLIENT *);
extern "C" ni_status * nibind_destroydomain_1_svc(ni_name *, struct svc_req *);
#define NIBIND_BIND ((u_long)8)
extern "C" void * nibind_bind_1(nibind_bind_args *, CLIENT *);
extern "C" void * nibind_bind_1_svc(nibind_bind_args *, struct svc_req *);

#elif __STDC__
#define NIBIND_PING ((u_long)0)
extern  void * nibind_ping_1(void *, CLIENT *);
extern  void * nibind_ping_1_svc(void *, struct svc_req *);
#define NIBIND_REGISTER ((u_long)1)
extern  ni_status * nibind_register_1(nibind_registration *, CLIENT *);
extern  ni_status * nibind_register_1_svc(nibind_registration *, struct svc_req *);
#define NIBIND_UNREGISTER ((u_long)2)
extern  ni_status * nibind_unregister_1(ni_name *, CLIENT *);
extern  ni_status * nibind_unregister_1_svc(ni_name *, struct svc_req *);
#define NIBIND_GETREGISTER ((u_long)3)
extern  nibind_getregister_res * nibind_getregister_1(ni_name *, CLIENT *);
extern  nibind_getregister_res * nibind_getregister_1_svc(ni_name *, struct svc_req *);
#define NIBIND_LISTREG ((u_long)4)
extern  nibind_listreg_res * nibind_listreg_1(void *, CLIENT *);
extern  nibind_listreg_res * nibind_listreg_1_svc(void *, struct svc_req *);
#define NIBIND_CREATEMASTER ((u_long)5)
extern  ni_status * nibind_createmaster_1(ni_name *, CLIENT *);
extern  ni_status * nibind_createmaster_1_svc(ni_name *, struct svc_req *);
#define NIBIND_CREATECLONE ((u_long)6)
extern  ni_status * nibind_createclone_1(nibind_clone_args *, CLIENT *);
extern  ni_status * nibind_createclone_1_svc(nibind_clone_args *, struct svc_req *);
#define NIBIND_DESTROYDOMAIN ((u_long)7)
extern  ni_status * nibind_destroydomain_1(ni_name *, CLIENT *);
extern  ni_status * nibind_destroydomain_1_svc(ni_name *, struct svc_req *);
#define NIBIND_BIND ((u_long)8)
extern  void * nibind_bind_1(nibind_bind_args *, CLIENT *);
extern  void * nibind_bind_1_svc(nibind_bind_args *, struct svc_req *);

#else /* Old Style C */
#define NIBIND_PING ((u_long)0)
extern  void * nibind_ping_1();
extern  void * nibind_ping_1_svc();
#define NIBIND_REGISTER ((u_long)1)
extern  ni_status * nibind_register_1();
extern  ni_status * nibind_register_1_svc();
#define NIBIND_UNREGISTER ((u_long)2)
extern  ni_status * nibind_unregister_1();
extern  ni_status * nibind_unregister_1_svc();
#define NIBIND_GETREGISTER ((u_long)3)
extern  nibind_getregister_res * nibind_getregister_1();
extern  nibind_getregister_res * nibind_getregister_1_svc();
#define NIBIND_LISTREG ((u_long)4)
extern  nibind_listreg_res * nibind_listreg_1();
extern  nibind_listreg_res * nibind_listreg_1_svc();
#define NIBIND_CREATEMASTER ((u_long)5)
extern  ni_status * nibind_createmaster_1();
extern  ni_status * nibind_createmaster_1_svc();
#define NIBIND_CREATECLONE ((u_long)6)
extern  ni_status * nibind_createclone_1();
extern  ni_status * nibind_createclone_1_svc();
#define NIBIND_DESTROYDOMAIN ((u_long)7)
extern  ni_status * nibind_destroydomain_1();
extern  ni_status * nibind_destroydomain_1_svc();
#define NIBIND_BIND ((u_long)8)
extern  void * nibind_bind_1();
extern  void * nibind_bind_1_svc();
#endif /* Old Style C */

#endif /* !_NIBIND_PROT_H_RPCGEN */
