.\" Copyright (c) 2014 Apple Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of Apple Computer nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd May 12, 2016
.Dt SmartCardServices 7
.Os "Mac OS X"
.Sh NAME
.Nm SmartCardServices
.Nd overview of smart card support
.Sh DESCRIPTION
.Nm
is a set of components for OS X smart card support.
.Pp
Any smart card which supports the PIV standard is supported natively by OS X. Access to smart card items is possible using the keychain interface. Applications can install additional drivers for smart cards that are not natively supported.
.Pp
Smart card certificates are automatically added to user's keychain when a smart card is inserted. Smart card certificates can be listed with
.Em security
using the
.Em list-smartcards
or
.Em export-smartcard 
commands. Keychain Access GUI cannot be used to manipulate or list these certificates. 
.Sh SETUP
To associate users with smart cards, the system can be set up for either fixed key mapping or attribute based mapping. For fixed key use
.Xr sc_auth 8
or use the dialog which appears automatically when an unassociated smartcard is inserted into a reader. This dialog can be globally suppressed by:
.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard UserPairing -bool NO
.Ed
.Pp
Attribute matching can be set up using the appropriate 
.Em AttributeMapping
section in the configuration file as described below. There is no default configuration. If no AttributeMapping exists or the configuration file is missing, attribute matching is not used. If both fixed key mapping and attribute mapping are able to associate the inserted smart card with a user, attribute mapping takes precedence.
.Pp
By default certificates do not need to be trusted to allow association. Certificate trust can be globally enforced by setting:
.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard checkCertificateTrust -bool YES
.Ed
.Sh CONFIGURATION FILE
The world-readable configuration file should be located at
.Em /etc/SmartcardLogin.plist
and should be in a standard plist format. It may contain the following optional sections:
.Bl -tag -width -indent  \" Begins a tagged list 
.It Em UserSelectorPath
This string value points to the custom UserSelector process which is used for associating users with smart cards. If this section is not found or the component at that path does not exist, the system UserSelector is used.
.It Em AttributeMapping
This section is used to set up an optional attribute mapping for the system UserSelector. For each available user record in OpenDirectory, certificate field values are combined into a format string which is then compared to a predefined attribute string. Specifying multiple OpenDirectory attribute strings or using conditional formatting in the format string is not supported. All items in this section are mandatory.
.Pp
.Em fields
contains an array of string values. This is the list of certificate field names that will be used to compare against the attribute string. The following field names are supported:
.br
Common Name
.br
RFC 822 Name
.br
NT Principal Name
.br
Organization
.br
OrganizationalUnit:1
.br
OrganizationalUnit:2
.br
OrganizationalUnit:3
.br
Country
.Pp
.Em formatString
contains a string value which specifies how certificate fields will be concatenated. Dollar sign plus number (starting with 1) is replaced with the field
value at the appropriate index.
.Pp
.Em dsAttributeString
contains a string value. This defines the target attributes for the desired OpenDirectory user record. It will be compared against the generated format strings.
.El                      \" Ends the list
.br

.Sh ATTRIBUTE MAPPING CONFIG EXAMPLE
Let's have following sample configuration:
.br
<key>AttributeMapping</key>
.br
<dict>
.br
	<key>fields</key>
.br
	<array>
.br
		<string>Common Name</string>
.br
		<string>RFC 822 Name</string>
.br
	</array>
.br
	<key>formatString</key>
.br
	<string>$2-$1</string>
.br
	<key>dsAttributeString</key>
.br
	<string>dsAttrTypeNative:longName</string>
.br
</dict>
.Pp
Let's also have a certificate that has
.Em Common Name
with value "John Appleseed" and 
.Em RFC 822 Name
with value "jappleseed@apple.com". For 
.Em formatString
"$1-$2"
the result would be
.Em "jappleseed@apple.com-John Appleseed"
and this result would be compared to a
.Em dsAttrTypeNative:email
field. When a match is found, the corresponding user is considered associated with the smart card.
.Sh EXTENSION
Extensions can be created using the Xcode Smart Card Token Extension template.
.Sh USB SMART CARD READER DRIVERS
OS X has built-in support for USB CCID class-compliant smart card readers. For other readers, install the reader driver in
.Pa /usr/local/libexec/SmartCardServices/drivers .
Each driver is a bundle. The bundle contains an XML file Info.plist which contains the device's USB vendor ID and product ID. For detailed description of the plist format and how to write a reader driver, see http://pcsclite.alioth.debian.org/api/group__IFDHandler.html
.Sh SMART CARD APDU LOGGING
It is possible to turn on logging for smart cards by setting the global preference:
.Pp
.Bd -literal -offset indent
sudo defaults write /Library/Preferences/com.apple.security.smartcard Logging -bool yes
.Ed
.Pp
After a smart card reader is connected (or after reboot) all operations including contents of sent and received APDU messages are then logged into the system log. Logging uses the facility com.apple.security.smartcard.log so it is possible to set up filtering of these logs into custom targets (see
.Xr asl.conf 5 )
.Pp
To avoid security risks that could occur if logging is turned on indefinitely, the logging setting is one-shot - it must be turned on by the command above to start logging again with a new reader. This includes unplugging and replugging the same reader.
.Sh SEE ALSO
.Xr SmartCardServices-legacy 7 ,
.Xr sc_auth 8 ,
.Xr defaults 1 ,
.Xr asl.conf 5 ,
.Xr ssh-keychain 8 ,
.Xr pam_smartcard 8 ,
.Xr security 1
